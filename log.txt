===========================
Setup ( Create React App )
===========================

1) mkdir Marxx - Creates Marxx folder
2) cd Marxx - Goes into Marxx folder
3) touch log.txt - Creates a text file called log to log all commands used to create this project.

----------------------------------------
Removes and re-install create-react-app
----------------------------------------
4) npm uninstall -g create-react-app
5) npx clear-npx-cache
6) npm i create-react-app
----------------------------------------
7) npx create-react-app@latest frontend - Creates React App called Marxx


==============
Testing
==============

8) cd frontend - goes into frontend folder
9) npm start - Starts React application name frontend

-----------------------------------------------------------------
Line 9 Gives Error ( Something is already running on port 3000 )
-----------------------------------------------------------------
10) npx kill-port 3000 - Kills the process running on port 3000
11) npm start - Starts React app ( Works! )


========================================
Remove Unnecessary Files from React App
========================================

11) Go to frontend / src / App.js
12) Remove all content under the header tag ( <header /> ), className(s), and the imports.
13) Create an anchor tag to link to the root ( / ) of the application and name it marxx.
14) Create a main section ( <main />) ) and place List products inside below the header tag. 
15) Go to frontend / src / index.css
16) Remove the code element
17) Create a header element and add properties: background-color, and padding
18) Set the anchor link inside header color property to white, and 
	text-decoration to none ( Removes underline ), font-weight to bold
	and font-size to 2rem.


==============================================
Create a Git Repository and Push it to Github
==============================================

19) Remove the git file from frontend and create another git file in the root direction ( Marxx )
20) cd frontend  -   Goes to frontend folder
21) rm -rf .git  -   Removes the git file
22) Move the .gitignore file from frontend to Marxx. ( Drag and drop method in VS code )
23) Go to .gitignore and remove the forward slash ( / ) from node_modules and build to ignore all sub folders inside node_modules and build folders .
24) cd ..       - Go to Marxx folder which is one directory above frontend folder 
25) git init    -  Initialize Repo
26) git add .   - Tracks All Files
27) git commit -m "initial commit"  -  Commit first message
28) git status  -  Checks the status of the files in the repo
29) Create a cloud Repo by going to github.com and log in
30) Create a new Repo ( Click on the new icon, go to github.com/new if you can't find the icon )
31) Name Repo Marxx, set view to public, add a README file then click create repository.

--------------------------------------------------
Push an existing repository from the command line
--------------------------------------------------

32) git remote add origin https://github.com/chevano/Marxx.git  - Establishing a remote connection with GitHub
33) git branch -M main
34) git push -u origin main ( Complains about wrong credentials because it needs a token instead of a password )

------------------------
Resolve merge conflict
------------------------

35) Go to settings by clicking on the profile pic icon
36) Click Developer settings
37) Click on Personal access tokens and select tokens (classic)
38) Generate token and add the token instead of a password when running line 34 again
39) After running line 34 you will then run into a merge conflict type the following commands:
39a) git reset --mixed origin/main
39b) git add.
39c) git commit -m "Resolving merge conflict"
39d) git push origin main

Note: git reset --mixed origin/main can also be written git reset origin/main, since the mixed option is the default one when using git reset.


============================================================
Home Screen : Create a List of Products using a card layout
============================================================

---------------------------
Create products array
---------------------------

40a) Go to Marxx / frontend / src and create a file called data.js
40b) Inside data.js create an object called ( data ) of type const, that contains an array of objects to store a list of products, where this array of objects is called ( products ) and have the following fields: 
	( name, category, image, price, countInStock, brand, rating, numReviews, description ).


-----------------------
Add product images
-----------------------

41a) cd Marxx/frontend/public - Go to Marxx / frontend / public
41b) mkdir images             - Create a folder called images 
41c) Populate the folder with some pics

--------------------
Render products
--------------------

42a) Go to Marxx / frontend / src / App.js
42b) Use a map function to loop and display the products inside the data array

-------------------
Style products
-------------------

43a) Go to Marxx / frontend / src / index.css
43b) Style the products, and products className using flexbox to lay them out along the x-axis.

=======================================================
Save Changes and Push it to Github : Update log file 2
=======================================================
44) git add .
45) git commit -m "Create List Products and an Array of Products"
46) git push origin main



========================================================================
Home Screen : Implement Routing to configure routes for different pages
========================================================================

47) cd Marxx/frontend  -  Go to Marxx / frontend
48) npm i react-router-dom  -  Install routing package ( Enables routing in react applications )
49) Go to reactrouter.com and looking under the Routers Section for how to implement BrowserRouter
50) Go to Marxx / frontend / src / App and wrap the content of App() inside BrowserRouter and implement Routes, and Route as follow:
51) cd Marxx/frontend/src   -   Go to Marxx / frontend / src
52) Create a folder called ( screens ) and 2 files namely; ( HomeScreen.js ) and ( ProductScreen.js )
53) Create a functional component for both HomeScreen.js and ProductScreen.js that reads Home Screen, Product Screen respectively. 
54) Place all the code inside App() below <Routes> from Marxx/frontend/src/App inside HomeScreen from Marxx/frontend/src/screens/HomeScreen.js
55) Inside ProductScreen() use the ( useParams ) hook to get the ( name ) parameter from the url
56) Change all ( a ) tags to ( Link ) tags to remove the page refresh and also because we are now using react-router-dom.



=======================================================
Save Changes and Push it to Github : Update log file 3
=======================================================

57) Go to Marxx folder
58) git add .
59) git commit -m "Implement Routing"
60) git push origin main

=======================================================
Save Changes and Push it to Github : Update log file 4
=======================================================

Log file did not Update
-----------------------
61) Go to Marxx folder
62) git add .
63) git commit -m "Updating log file 4"
64) git push origin main

=======================================================
Home Screen : Create a Backend API using NodeJS Server
=======================================================

65) cd Marxx  -  Go to root folder ( Marxx )
66) mkdir backend - Creates a folder called ( backend ) in the root directory
67) cd backend  -  Go to ( backend ) folder, where we will create a nodejs project
68) npm init  -  Initialize a project and create the package.json file
69) Press Enter to every prompt to accept the default settings
70) Inside the ( package.json ) file, after the name property, put a comma and add the command ( "type": "module")
which tells Node.js to interpret .js files within that package as using ES module syntax.
71) Create a ( server.js ) file inside backend folder to hold all the server related code like installing and using express.js
72) npm install express  -  Installs the express server ( express.js ), which will create ( node_modules ) folder and ( package-lock.json ) file inside the ( backend ) folder
73) Copy ( data.js ) file from Marxx/frontend/src to Marxx/backend  ( will remove duplicates later )
74) Create a server inside ( server.js ) file using express as follows:
75) Note all .js files in server should have the .js extention on every imports
76) run node server.js  -  Starts backend server
77) run npm install nodemon --save-dev  -  Install nodemon to update the server whenever you have a change in the code inside the ( backend ) folder
78) Press control + c to stop server
79) Go to Marxx/backend/package.json and add the command ( "start": "nodemon server.js" ) inside "scripts"
80) run npm start  -  After adding the above command we don't need to use ( nodemon server.js or node server.js ) to start the server

=======================================================
Save Changes and Push it to Github : Update log file 5
=======================================================

81) Go to Marxx folder
82) git add .
83) git commit -m "Create a Backend API using NodeJS Server"
84) git push origin main


==========================================
Home Screen : Fetch Products from Backend
==========================================

85) Go to Marxx/frontend/package.json
86) Inside ( package.json ) file add the following command ( "proxy": "http://localhost:5000" )
87) npm install axios  -  Run command inside Marxx/frontend folder. Is an HTTP client that simplifies making API calls
88) Go to Marxx/frontend/src/HomeScreen
89) Create a useState hook called ( [products, setProducts] ) to manage the state of the products on the backend, where the default value is an empty array ( [] )
90) Use useEffect() and axios to fetch the data from the backend as follows:
91) Remove the duplicate data.js file from Marxx/frontend/src/data.js
92) run npm start in the backend and frontend folder
93) To ensure that the list of products is coming from the backend, inspect the page on http://localhost:3000 and go to Network and select Fetch / XHR


=======================================================
Save Changes and Push it to Github : Update log file 6
=======================================================

94) Go to Marxx folder
95) git add .
96) git commit -m "Retrieve data from the Backend"
97) git push origin main

================================================================================
Home Screen : Replacing useState with useReducer Hooks to manage complex states
================================================================================

98) Go to Marxx/frontend/src/sreens/HomeScreen
99) Above the HomeScreen functional component define a reducer function called ( reducer ) that will handle the following states:
99a) Create a Failed State called ( FETCH_FAIL ) 
99b) Create a Successful State called ( FETCH_SUCCESS)
99c) Create a Pending State, where the user makes a request called ( FETCH_REQUEST )
99d) And a default state where the user does something else 
99e) Create and set the following fields inside the reducer for each state; loading, products, and error.
100) Replace the useState hook ( [products, setProducts ] = useState([]) ) with a useReducer hook that sets the default state of ( loading ) to true, ( error ) to an empty string, and ( products ) to an empty array.
101) Get State from useReducer by making a call to the ( dispatch ) function, dispatching an action inside the ( fetchData() )
102) Render the loading, and error variables as needed in the JSX in Marxx/frontend/src/screens/HomeScreen
103) For debugging purposes install a logger called ( use-reducer-logger )
104) Go to Marxx/frontend
105) npm install use-reducer-logger --force
106) import logger from 'use-reducer-logger
107) Sample Code listed below


=======================================================
Save Changes and Push it to Github : Update log file 7
=======================================================

108) Go to Marxx folder
109) git add .
110) git commit -m "Replacing useState with useReducer Hooks to manage complex states"
111) git push origin main

=====================================
Bootstrap : Add Bootstrap to project
=====================================

112) Go to react-bootstrap.github.io and click get started and follow the instructions
113) Go to Marxx/frontend 
114) Run npm install react-bootstrap bootstrap  -  Install React Bootstrap package
115) Go to Marxx/frontend/src/App.js and Update the file as follows
116) Inside the ( header ) element, create a Navbar component using boostrap Navbar
117) Include imports for navbar namely ( react-bootstrap/Navbar ), Container namely ( react-bootstrap/Container ), and LinkContainer namely ( react-router-boostrap )
118) Update Marxx/frontend/src/index.css and remove all the styling for the header tag
119) Go to Marxx/frontend/src/index.js and import bootstrap before ( index.css ) the import is as follows import ( 'bootstrap/dist/css/bootstrap.min.css' )
120) Go to Marxx/frontend/src/App.js and wrap the main tag inside a Container component (<Container>) to create a nice alignment between the nav section and the main section.
121) Add a footer element below the main element and inside the footer element add some content.
122) Use react bootstrap flexbox to divide up the nav, main, and footer sections by adding styles ( "d-flex flex-column site-container" ) 
inside the main div in ( App.js ), where site-container is a className created to set the ( min-height to 100vh ) in ( index.css )


=======================================================
Save Changes and Push it to Github : Update log file 8
=======================================================

123) Go to Marxx folder
124) git add .
125) git commit -m "Add Bootstrap to Project"
126) git push origin main

======================================================================================
Bootstrap : Create Rating and Product Component and adding Bootstrap to HomeScreen.js
======================================================================================

127) Before Creating the Rating and Product Component go to Marxx/frontend/src/screens/Homescreen.js and replacing the css styling with bootstrap styling
128) Wrap ( products.map ) inside a Row container ( <Row> ) and inside the Row Container add a pair of curly braces
129) Below ( products.map ) add a Col container  ( <Col> ) that wraps the remaining code of ( products.map )
130) Add the following imports to add Row and Col Container respectively ( import Row from 'react-bootstrap/Row' ), ( import Col from 'react-bootstrap/Col' )
131) Remove the code inside ( <Col> ) and use it to create a component called ( Products ) for reusability later.
132) Go to Marxx/frontend/src and create a folder called ( components ) and inside the ( components ) folder, add a file called ( Product.js ), which signifies a react component
133) Go to Marxx/frontend/src/component/Product.js
134) Create a Product Component using the code snippet cut inside the Col component ( <Col> )
135) Inside the ( Product ) Component replace the main div with a card component ( <Card> )
136) Set the img tag className to ("card-img-top" ), which makes the image stick to the top of the card
137) Wrap the Remaining code inside a Card.Body component ( <Card.Body> ) and make the following changes:
137a) Replace the p tag that displays the name with a Card.Title component ( <Card.Title> )
137b) Replace the other p tag that displays the price with a Card.Text component ( <Card.Text> )
137c) Replace the html element button ( <button> ) tag with a react-bootstrap component button ( <Button> )
138) Add the import for the Button component ( import Button from 'react-bootstrap/Button' )
139) Below the ( Link ) component that contains the name of the product ( product.name ) add a Rating component ( <Rating> ) with rating and numReviews properties
140) Go to Marxx/frontend/src/component and create a file called ( Rating.js ) that signifies a react component
141) Go to Marxx/frontend/src/component/Rating.js and Define a component called ( Rating ) that deconstruct the ( rating ) and ( numReviews ) properties and displays them in JSX 
142) Use font Awesome to display stars in the JSX
143) Go to Marxx/frontend/public/index.html, in the header section add a link to connect to font awesome cdn
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
144) Import ( Rating ) component inside ( Product ) component using ( import Rating from './Rating' )
145) Go to Marxx/frontend/src/index.css and target all the span tags inside rating className to change the color of the stars displayed to gold
146) In index.css type ( .btn-primary { background-color: #f0c040; color: #000000;})


=======================================================
Save Changes and Push it to Github : Update log file 9
=======================================================

147) Go to Marxx folder
148) git add .
149) git commit -m "Create Rating and Product Component and adding Bootstrap to HomeScreen.js"
150) git push origin main


================================================
Product Screen : Create Product Details Screen
================================================

151) Go to Marxx/frontend/src/screens/HomeScreen.js and copy the ( reducer ) function, the code for ( useReducer ) as well as ( useEffect ) and paste it in ( ProductScreen.js ) 
153) Go to ( ProductScreen.js ) and modify the code to work by importing the imports, and making the following changes:
153a) Change products to product in the useReducer hook
153b) Change the GET request link to ( `/api/products/name/${name}` )
153c) Add ( name ) to the dependency list of the useEffect so that useEffect runs everytime there's an update to ( name ) in the url
154) Go to Marxx/backend/server.js and make a GET request to ( '/api/products/name/:name' ) that returns 
the product that has the request url name on the backend, or sends an error message if the request product name doesn't exist
155) Go to (ProductScreen.js) and render the ( product, loading, and error ) fields in the JSX
156) To display the fields of ( product ), create a 3 column layout in a Row container as follows: ( <Row> <Col> </Col> <Col> </Col> Col> </Col> </Row> ) 
157) For the first Col Container ( <Col> ) Display the image of the Product as well as the name.
158) For the second Col Container, create a list Group Container that holds the name, rating, number of reviews, price, and description of the product
159) For the third Col Container, create a card that contains inventory data such as the price and status of the product using a List Group Container
160) Go to Marxx/frontend/src/App.js and add margin to the top of the screen by setting the Container container ( <Container> ) className to mt-5


=======================================================
Save Changes and Push it to Github : Update log file 10
=======================================================

161) Go to Marxx folder
162) git add .
163) git commit -m "Create Product Details Screen ( Product Screen ) "
164) git push origin main


======================================================
Product Screen : Create Message and Loading component
======================================================

165) Create Loading Component
165a) Go to Marxx/frontend/src/components and create a file called ( LoadingBox.js ) that will be used as the loading Component
165b) Inside ( LoadingBox.js ), create a component that returns a Spinner container ( <Spinner> ) that has animation set to border, role set to status
and inside the Spinner Container create a span tag that has the className attribute set to visually-hidden while displaying the text Loading... inside the span tag
165c) import the spinner package ( import 'react-bootstrap/Spinner'; )
165d) Replace the Loading text in ( HomeScreen.js ) and ( ProductScreen.js ) with the LoadingBox component ( <LoadingBox> )
166) Create Message Component
166a) Go to Marxx/frontend/src/components and create a file called ( MessageBox.js ) that will be used as the Message Box Component that will be used to display relevant messages to the user
166b) Inside the MessageBox component return ( <Alert variant={props.variant || 'info'}> {props.children} </Alert>; )
166c) Add import ( import Alert from 'react-bootstrap/Alert'; )
166d) Replace the error variable in ( HomeScreen.js ) and ( ProductScreen.js ) with the MessageBox component ( <MessageBox> )
166e) Type in an incorrect url to text if the Message Box displays an error message
167) Go to Marxx/frontend/src and create a file called ( utils.js ) that will hold all the utilities functions otherwise known as helper functions
168) Create a function called ( getError ) that accepts an error object that returns the message content if set on the backend otherwise will return the general error message
169) Replace ( err.message ) in the payload of fetchData inside the useEffect hook with ( getError ) function from utils.js in both ( HomeScreen.js ) and ( ProductScreen.js )
170) Import ( getError ) function in both ( HomeScreen.js ) and ( ProductScreen.js )


=======================================================
Save Changes and Push it to Github : Update log file 11
=======================================================

171) Go to Marxx folder
172) git add .
173) git commit -m "Create Message and Loading component"
174) git push origin main


========================================================
Cart Screen : Implement Add to Cart Functionality Start
========================================================

175) Create a Store using React Context
176) Go to marxx/frontend/src
177) Create a file called ( Store.js ) that will act as a react store inside the ( src ) folder
178) Create a Store using createContext() as follows: export const Store = createContext();
179) Define a Store Provider Function and inside the function create a useReducer hook that accepts a reducer called ( reducer ) and a variable to keep track of all the items in the shopping cart called ( initialState )
180) Define a reducer function called ( reducer )
181) Create variable called ( initialState ) that holds a ( cart ) object and inside the cart object, create an array called ( cartItems ) that will hold the list of items in the shopping cart
181) Create a value object that will hold properties (state) and (dispatch) that will be passed to the <Store.Provider> Component
182) Inside the StoreProvider function, return a ( <Store.Provider ) component
183) Go to marxx/frontend/src/index.js 
184) Inside index.js below the ( <React.StrictMode> ) component, wrap the remaining code inside the ( <StoreProvider> ) component
185) Go to marxx/frontend/src/screens/ProductScreen.js
186) Inside ProductScreen.js scroll down at the bottom of the page where the last ( <ListGroup.Item> ) component is and add an onClick handler called ( addToCartHandler)
187) Define the addToCartHandler function at the top of the file
188) Retrieve State, and dispatch properties from useContext()
189) Implement the Cart Badge UI
190) Go to App.js and below the ( <Link> ) component, create a ( <Nav> ) component that consist of the Cart and its Badge
191) Go to ProductScreen and Implement Add to Cart Button and Click Handler


=======================================================
Save Changes and Push it to Github : Update log file 12
=======================================================

192) Go to Marxx folder
193) git add .
194) git commit -m "Implement Add to Cart Functionality Start"
195) git push origin main