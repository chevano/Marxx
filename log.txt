===========================
Setup ( Create React App )
===========================

1) mkdir Marxx - Creates Marxx folder
2) cd Marxx - Goes into Marxx folder
3) touch log.txt - Creates a text file called log to log all commands used to create this project.

----------------------------------------
Removes and re-install create-react-app
----------------------------------------
4) npm uninstall -g create-react-app
5) npx clear-npx-cache
6) npm i create-react-app
----------------------------------------
7) npx create-react-app@latest frontend - Creates React App called Marxx


==============
Testing
==============

8) cd frontend - goes into frontend folder
9) npm start - Starts React application name frontend

-----------------------------------------------------------------
Line 9 Gives Error ( Something is already running on port 3000 )
-----------------------------------------------------------------
10) npx kill-port 3000 - Kills the process running on port 3000
11) npm start - Starts React app ( Works! )


========================================
Remove Unnecessary Files from React App
========================================

11) Go to frontend / src / App.js
12) Remove all content under the header tag ( <header /> ), className(s), and the imports.
13) Create an anchor tag to link to the root ( / ) of the application and name it marxx.
14) Create a main section ( <main />) ) and place List products inside below the header tag. 
15) Go to frontend / src / index.css
16) Remove the code element
17) Create a header element and add properties: background-color, and padding
18) Set the anchor link inside header color property to white, and 
	text-decoration to none ( Removes underline ), font-weight to bold
	and font-size to 2rem.


==============================================
Create a Git Repository and Push it to Github
==============================================

19) Remove the git file from frontend and create another git file in the root direction ( Marxx )
20) cd frontend  -   Goes to frontend folder
21) rm -rf .git  -   Removes the git file
22) Move the .gitignore file from frontend to Marxx. ( Drag and drop method in VS code )
23) Go to .gitignore and remove the forward slash ( / ) from node_modules and build to ignore all sub folders inside node_modules and build folders .
24) cd ..       - Go to Marxx folder which is one directory above frontend folder 
25) git init    -  Initialize Repo
26) git add .   - Tracks All Files
27) git commit -m "initial commit"  -  Commit first message
28) git status  -  Checks the status of the files in the repo
29) Create a cloud Repo by going to github.com and log in
30) Create a new Repo ( Click on the new icon, go to github.com/new if you can't find the icon )
31) Name Repo Marxx, set view to public, add a README file then click create repository.

--------------------------------------------------
Push an existing repository from the command line
--------------------------------------------------

32) git remote add origin https://github.com/chevano/Marxx.git  - Establishing a remote connection with GitHub
33) git branch -M main
34) git push -u origin main ( Complains about wrong credentials because it needs a token instead of a password )

------------------------
Resolve merge conflict
------------------------

35) Go to settings by clicking on the profile pic icon
36) Click Developer settings
37) Click on Personal access tokens and select tokens (classic)
38) Generate token and add the token instead of a password when running line 34 again
39) After running line 34 you will then run into a merge conflict type the following commands:
39a) git reset --mixed origin/main
39b) git add.
39c) git commit -m "Resolving merge conflict"
39d) git push origin main

Note: git reset --mixed origin/main can also be written git reset origin/main, since the mixed option is the default one when using git reset.


==============================================
Create a List of Products using a card layout
==============================================

---------------------------
Create products array
---------------------------

40a) Go to Marxx / frontend / src and create a file called data.js
40b) Inside data.js create an object called ( data ) of type const, that contains an array of objects to store a list of products, where this array of objects is called ( products ) and have the following fields: 
	( name, category, image, price, countInStock, brand, rating, numReviews, description ).


-----------------------
Add product images
-----------------------

41a) cd Marxx/frontend/public - Go to Marxx / frontend / public
41b) mkdir images             - Create a folder called images 
41c) Populate the folder with some pics

--------------------
Render products
--------------------

42a) Go to Marxx / frontend / src / App.js
42b) Use a map function to loop and display the products inside the data array
42b1)

**********************************************************************
import data from './data';

function App() {
  return (
    <div>
      <header>
        <a href="/">Marxx</a>
      </header>
      <main>
        <h1> List of Products </h1>
        <div className="products">
          {data.products.map((product) => (
            <div className="product" key={product.name}>
              <a href={`/product/${product.name}`}>
                <img src={product.image} alt={product.name} />
              </a>
              <div className="product-info">
                <p> {product.name} </p>
                <p>
                  <strong>${product.price}</strong>
                </p>
                <button> Add to cart </button>
              </div>
            </div>
          ))}
        </div>
      </main>
    </div>
  );
}

export default App;
***********************************************************************************

-------------------
Style products
-------------------

43a) Go to Marxx / frontend / src / index.css
43b) Style the products, and products className using flexbox to lay them out along the x-axis.
43b1)

*************************************************************************************
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

header {
  background-color: lightblue;
  padding: 1.1rem;
}

header a {
  color: white;
  text-decoration: none;
  font-weight: bold;
  font-size: 2rem;
}

main {
  padding: 1rem;
}

.products {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
}

.product {
  border: 1px #404040 solid;
  margin: 1rem;
}

.product img {
  width: 100%;
  max-width: 400px;
}

.product-info {
  padding: 1rem;
}
********************************************************************************************

=======================================================
Save Changes and Push it to Github : Update log file 2
=======================================================
44) git add .
45) git commit -m "Create List Products and an Array of Products"
46) git push origin main



=============================================================
Implement Routing to configure routes for different pages
=============================================================

47) cd Marxx/frontend  -  Go to Marxx / frontend
48) npm i react-router-dom  -  Install routing package ( Enables routing in react applications )
49) Go to reactrouter.com and looking under the Routers Section for how to implement BrowserRouter
50) Go to Marxx / frontend / src / App and wrap the content of App() inside BrowserRouter and implement Routes, and Route as follow:
50a)

******************************************************************
import data from './data';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import HomeScreen from './screens/HomeScreen';

function App() {
  return (
    <BrowserRouter>
      <div>
        <header>
          <a href="/">Marxx</a>
        </header>
        <main>
          <Routes>
            <Route path="/" element={<HomeScreen />} />
          </Routes>
          <h1> List of Products </h1>
          <div className="products">
            {data.products.map((product) => (
              <div className="product" key={product.name}>
                <a href={`/product/${product.name}`}>
                  <img src={product.image} alt={product.name} />
                </a>
                <div className="product-info">
                  <p> {product.name} </p>
                  <p>
                    <strong>${product.price}</strong>
                  </p>
                  <button> Add to cart </button>
                </div>
              </div>
            ))}
          </div>
        </main>
      </div>
    </BrowserRouter>
  );
}

export default App;
*************************************************************************

51) cd Marxx/frontend/src   -   Go to Marxx / frontend / src
52) Create a folder called ( screens ) and 2 files namely; ( HomeScreen.js ) and ( ProductScreen.js )
53) Create a functional component for both HomeScreen.js and ProductScreen.js that reads Home Screen, Product Screen respectively. 
53a)
**************************************
function HomeScreen() {
  return <div> Home Screen </div>;
}

export default HomeScreen;
***************************************



53b)
***************************************
import { useParams } from 'react-router-dom';

function ProductScreen() {
  const params = useParams();
  const { name } = params; // get the name parameter from the url (params)

  return (
    <div>
      <h1> Product Screen </h1>
      <p> {name} </p>
    </div>
  );
}

export default ProductScreen;

***************************************


54) Place all the code inside App() below <Routes> from Marxx/frontend/src/App inside HomeScreen from Marxx/frontend/src/screens/HomeScreen.js
55) Inside ProductScreen() use the ( useParams ) hook to get the ( name ) parameter from the url
56) Change all ( a ) tags to ( Link ) tags to remove the page refresh and also because we are now using react-router-dom.



=======================================================
Save Changes and Push it to Github : Update log file 3
=======================================================

57) Go to Marxx folder
58) git add .
59) git commit -m "Implement Routing"
60) git push origin main

=======================================================
Save Changes and Push it to Github : Update log file 4
=======================================================

Log file did not Update
-----------------------
61) Go to Marxx folder
62) git add .
63) git commit -m "Updating log file 4"
64) git push origin main

===========================================
Create a Backend API using NodeJS Server
===========================================

65) cd Marxx  -  Go to root folder ( Marxx )
66) mkdir backend - Creates a folder called ( backend ) in the root directory
67) cd backend  -  Go to ( backend ) folder, where we will create a nodejs project
68) npm init  -  Initialize a project and create the package.json file
69) Press Enter to every prompt to accept the default settings
70) Inside the ( package.json ) file, after the name property, put a comma and add the command ( "type": "module")
which tells Node.js to interpret .js files within that package as using ES module syntax.
71) Create a ( server.js ) file inside backend folder to hold all the server related code like installing and using express.js
72) npm install express  -  Installs the express server ( express.js ), which will create ( node_modules ) folder and ( package-lock.json ) file inside the ( backend ) folder
73) Copy ( data.js ) file from Marxx/frontend/src to Marxx/backend  ( will remove duplicates later )
74) Create a server inside ( server.js ) file using express as follows:

*********************************************************************************
import express from 'express';
import data from './data.js';

const app = express(); // Initializes a new instance of an Express App

// Returns a list of products when the user makes a GET request to /api/products
app.get('/api/products', (req, res) => {
  res.send(data.products);
});

const port = process.env.PORT || 5000;

// Starts Server
app.listen(port, () => {
  console.log(`server at http://localhost:${port}`);
});
*********************************************************************************

75) Note all .js files in server should have the .js extention on every imports
76) run node server.js  -  Starts backend server
77) run npm install nodemon --save-dev  -  Install nodemon to update the server whenever you have a change in the code inside the ( backend ) folder
78) Press control + c to stop server
79) Go to Marxx/backend/package.json and add the command ( "start": "nodemon server.js" ) inside "scripts"
80) run npm start  -  After adding the above command we don't need to use ( nodemon server.js or node server.js ) to start the server

=======================================================
Save Changes and Push it to Github : Update log file 5
=======================================================

81) Go to Marxx folder
82) git add .
83) git commit -m "Create a Backend API using NodeJS Server"
84) git push origin main


==================================
Fetch Products from Backend
==================================

85) Go to Marxx/frontend/package.json
86) Inside ( package.json ) file add the following command ( "proxy": "http://localhost:5000" )
87) npm install axios  -  Run command inside Marxx/frontend folder. Is an HTTP client that simplifies making API calls
88) Go to Marxx/frontend/src/HomeScreen
89) Create a useState hook called ( [products, setProducts] ) to manage the state of the products on the backend, where the default value is an empty array ( [] )
90) Use useEffect() and axios to fetch the data from the backend as follows:

***********************************************************************************************************
import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
// import data from '../data';

function HomeScreen() {
  const [products, setProducts] = useState([]); // use to manage the state of the products on the backend

  // Runs the function once after rendering the components
  useEffect(() => {
    const fetchData = async () => {
      const result = await axios.get('/api/products'); // Sends an AJAX request to the requested address
      setProducts(result.data);
    };
    fetchData();
  }, []);

  return (
    <div>
      <h1> List of Products </h1>
      <div className="products">
        {products.map((product) => (
          <div className="product" key={product.name}>
            <Link to={`/product/${product.name}`}>
              <img src={product.image} alt={product.name} />
            </Link>
            <div className="product-info">
              <Link to={`/product/${product.name}`}>
                <p> {product.name} </p>
              </Link>
              <p>
                <strong>${product.price}</strong>
              </p>
              <button> Add to cart </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default HomeScreen;
***********************************************************************************************************

91) Remove the duplicate data.js file from Marxx/frontend/src/data.js
92) run npm start in the backend and frontend folder
93) To ensure that the list of products is coming from the backend, inspect the page on http://localhost:3000 and go to Network and select Fetch / XHR


=======================================================
Save Changes and Push it to Github : Update log file 6
=======================================================

94) Go to Marxx folder
95) git add .
96) git commit -m "Retrieve data from the Backend"
97) git push origin main

==================================================================
Replacing useState with useReducer Hooks to manage complex states
==================================================================

98) Go to Marxx/frontend/src/sreens/HomeScreen
99) Above the HomeScreen functional component define a reducer function called ( reducer ) that will handle the following states:
99a) Create a Failed State called ( FETCH_FAIL ) 
99b) Create a Successful State called ( FETCH_SUCCESS)
99c) Create a Pending State, where the user makes a request called ( FETCH_REQUEST )
99d) And a default state where the user does something else 
99e) Create and set the following fields inside the reducer for each state; loading, products, and error.
100) Replace the useState hook ( [products, setProducts ] = useState([]) ) with a useReducer hook that sets the default state of ( loading ) to true, ( error ) to an empty string, and ( products ) to an empty array.
101) Get State from useReducer by making a call to the ( dispatch ) function, dispatching an action inside the ( fetchData() )
102) Render the loading, and error variables as needed in the JSX in Marxx/frontend/src/screens/HomeScreen
103) For debugging purposes install a logger called ( use-reducer-logger )
104) Go to Marxx/frontend
105) npm install use-reducer-logger --force
106) import logger from 'use-reducer-logger
107) Sample Code listed below

***************************************************************************************************************
import { useEffect, useReducer, useState } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import logger from 'use-reducer-logger';

const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true }; // Update loading to true while keeping the previous state the same
    case 'FETCH_SUCCESS':
      return { ...state, loading: false, products: action.payload }; // Update products with the data from the backend found in ( action.payload )
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload }; // Sets the error field with the data from the backend
    default:
      return state; // returns current state
  }
};

function HomeScreen() {
  const [{ loading, error, products }, dispatch] = useReducer(logger(reducer), {
    loading: true,
    error: '',
    products: [],
  });

  // Runs the function once after rendering the components
  useEffect(() => {
    const fetchData = async () => {
      dispatch({ type: 'FETCH_REQUEST' });
      try {
        const result = await axios.get('/api/products'); // Sends an AJAX request to the requested address
        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });
      } catch (err) {
        dispatch({ type: 'FETCH_FAIL', payload: err.message });
      }
    };
    fetchData();
  }, []);

  return (
    <div>
      <h1> List of Products </h1>
      <div className="products">
        {loading ? (
          <div>Loading...</div>
        ) : error ? (
          <div>{error}</div>
        ) : (
          products.map((product) => (
            <div className="product" key={product.name}>
              <Link to={`/product/${product.name}`}>
                <img src={product.image} alt={product.name} />
              </Link>
              <div className="product-info">
                <Link to={`/product/${product.name}`}>
                  <p> {product.name} </p>
                </Link>
                <p>
                  <strong>${product.price}</strong>
                </p>
                <button> Add to cart </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
}

export default HomeScreen;
***************************************************************************************************************

=======================================================
Save Changes and Push it to Github : Update log file 7
=======================================================

108) Go to Marxx folder
109) git add .
110) git commit -m "Replacing useState with useReducer Hooks to manage complex states"
111) git push origin main

==========================
Add Bootstrap to project
==========================

112) Go to react-bootstrap.github.io and click get started and follow the instructions
113) Go to Marxx/frontend 
114) Run npm install react-bootstrap bootstrap  -  Install React Bootstrap package
115) Go to Marxx/frontend/src/App.js and Update the file as follows
116) Inside the ( header ) element, create a Navbar component using boostrap Navbar
117) Include imports for navbar namely ( react-bootstrap/Navbar ), Container namely ( react-bootstrap/Container ), and LinkContainer namely ( react-router-boostrap )
118) Update Marxx/frontend/src/index.css and remove all the styling for the header tag
119) Go to Marxx/frontend/src/index.js and import bootstrap before ( index.css ) the import is as follows import ( 'bootstrap/dist/css/bootstrap.min.css' )
120) Go to Marxx/frontend/src/App.js and wrap the main tag inside a Container component (<Container>) to create a nice alignment between the nav section and the main section.
121) Add a footer element below the main element and inside the footer element add some content.
122) Use react bootstrap flexbox to divide up the nav, main, and footer sections by adding styles ( "d-flex flex-column site-container" ) 
inside the main div in ( App.js ), where site-container is a className created to set the ( min-height to 100vh ) in ( index.css )

App.js
-------
*********************************************************************************
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import HomeScreen from './screens/HomeScreen';
import ProductScreen from './screens/ProductScreen';
import Navbar from 'react-bootstrap/Navbar';
import Container from 'react-bootstrap/Container';

function App() {
  return (
    <BrowserRouter>
      <div className="d-flex flex-column site-container">
        <header>
          <Navbar bg="dark" variant="dark">
            <Container>
              <Link className="link" to="/">
                <Navbar.Brand>Marxx</Navbar.Brand>
              </Link>
            </Container>
          </Navbar>
        </header>
        <main>
          <Container>
            <Routes>
              <Route path="/" element={<HomeScreen />} />
              <Route path="/product/:name" element={<ProductScreen />} />
            </Routes>
          </Container>
        </main>
        <footer>
          <div className="text-center">All rights reserved</div>
        </footer>
      </div>
    </BrowserRouter>
  );
}

export default App;
*********************************************************************************


index.css
---------
*********************************************************************************
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: lightgrey;
}

.site-container {
  min-height: 100vh;
}

main {
  flex: 1; /* Divides the nav, main, and footer sections */
}

.products {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
}

.product {
  border: 1px #404040 solid;
  margin: 1rem;
}

.product img {
  width: 100%;
  max-width: 400px;
}

.product-info {
  padding: 1rem;
}

.link {
  text-decoration: none;
}
*********************************************************************************

index.js
--------
*********************************************************************************
import React from 'react';
import ReactDOM from 'react-dom/client';
import 'bootstrap/dist/css/bootstrap.min.css';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
*********************************************************************************

=======================================================
Save Changes and Push it to Github : Update log file 8
=======================================================

123) Go to Marxx folder
124) git add .
125) git commit -m "Add Bootstrap to Project"
126) git push origin main

==========================================================================
Create Rating and Product Component and adding Bootstrap to HomeScreen.js
==========================================================================

127) Before Creating the Rating and Product Component go to Marxx/frontend/src/screens/Homescreen.js and replacing the css styling with bootstrap styling
128) Wrap ( products.map ) inside a Row container ( <Row> ) and inside the Row Container add a pair of curly braces
129) Below ( products.map ) add a Col container  ( <Col> ) that wraps the remaining code of ( products.map )
130) Add the following imports to add Row and Col Container respectively ( import Row from 'react-bootstrap/Row' ), ( import Col from 'react-bootstrap/Col' )
131) Remove the code inside ( <Col> ) and use it to create a component called ( Products ) for reusability later.
132) Go to Marxx/frontend/src and create a folder called ( components ) and inside the ( components ) folder, add a file called ( Product.js ), which signifies a react component
133) Go to Marxx/frontend/src/component/Product.js
134) Create a Product Component using the code snippet cut inside the Col component ( <Col> )
135) Inside the ( Product ) Component replace the main div with a card component ( <Card> )
136) Set the img tag className to ("card-img-top" ), which makes the image stick to the top of the card
137) Wrap the Remaining code inside a Card.Body component ( <Card.Body> ) and make the following changes:
137a) Replace the p tag that displays the name with a Card.Title component ( <Card.Title> )
137b) Replace the other p tag that displays the price with a Card.Text component ( <Card.Text> )
137c) Replace the html element button ( <button> ) tag with a react-bootstrap component button ( <Button> )
138) Add the import for the Button component ( import Button from 'react-bootstrap/Button' )
139) Below the ( Link ) component that contains the name of the product ( product.name ) add a Rating component ( <Rating> ) with rating and numReviews properties
140) Go to Marxx/frontend/src/component and create a file called ( Rating.js ) that signifies a react component
141) Go to Marxx/frontend/src/component/Rating.js and Define a component called ( Rating ) that deconstruct the ( rating ) and ( numReviews ) properties and displays them in JSX 
142) Use font Awesome to display stars in the JSX
143) Go to Marxx/frontend/public/index.html, in the header section add a link to connect to font awesome cdn
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
144) Import ( Rating ) component inside ( Product ) component using ( import Rating from './Rating' )
145) Go to Marxx/frontend/src/index.css and target all the span tags inside rating className to change the color of the stars displayed to gold
146) In index.css type ( .btn-primary { background-color: #f0c040; color: #000000;})

HomeScreen.js
-------------
************************************************************************************************************************
import { useEffect, useReducer } from 'react';
import axios from 'axios';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Product from '../components/Product';

const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true }; // Update loading to true while keeping the previous state the same
    case 'FETCH_SUCCESS':
      return { ...state, loading: false, products: action.payload }; // Update products with the data from the backend found in ( action.payload )
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload }; // Sets the error field with the data from the backend
    default:
      return state; // returns current state
  }
};

function HomeScreen() {
  const [{ loading, error, products }, dispatch] = useReducer(reducer, {
    loading: true,
    error: '',
    products: [],
  });

  // Runs the function once after rendering the components
  useEffect(() => {
    const fetchData = async () => {
      dispatch({ type: 'FETCH_REQUEST' });
      try {
        const result = await axios.get('/api/products'); // Sends an AJAX request to the requested address
        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });
      } catch (err) {
        dispatch({ type: 'FETCH_FAIL', payload: err.message });
      }
    };
    fetchData();
  }, []);

  return (
    <div>
      <h1> List of Products </h1>
      <div className="products">
        {loading ? (
          <div>Loading...</div>
        ) : error ? (
          <div>{error}</div>
        ) : (
          <Row>
            {products.map((product) => (
              <Col
                key={product.name}
                xs={12}
                sm={6}
                md={4}
                lg={3}
                className="mb-3"
              >
                <Product product={product}></Product>
              </Col>
            ))}
          </Row>
        )}
      </div>
    </div>
  );
}

export default HomeScreen;
************************************************************************************************************************


Rating.js
----------
************************************************************************************************************************
function Rating(props) {
  const { rating, numReviews } = props;

  return (
    <div className="rating">
      {/* Using font Awesome to display stars depending on the number of ratings: full star, half of an star, or an empty star */}
      <span>
        <i
          className={
            rating >= 1
              ? 'fas fa-star'
              : rating >= 0.5
              ? 'fas fa-star-half-alt'
              : 'far fa-star'
          }
        />
      </span>

      <span>
        <i
          className={
            rating >= 2
              ? 'fas fa-star'
              : rating >= 1.5
              ? 'fas fa-star-half-alt'
              : 'far fa-star'
          }
        />
      </span>

      <span>
        <i
          className={
            rating >= 3
              ? 'fas fa-star'
              : rating >= 2.5
              ? 'fas fa-star-half-alt'
              : 'far fa-star'
          }
        />
      </span>

      <span>
        <i
          className={
            rating >= 4
              ? 'fas fa-star'
              : rating >= 3.5
              ? 'fas fa-star-half-alt'
              : 'far fa-star'
          }
        />
      </span>

      <span>
        <i
          className={
            rating >= 5
              ? 'fas fa-star'
              : rating >= 4.5
              ? 'fas fa-star-half-alt'
              : 'far fa-star'
          }
        />
      </span>

      <span>
        {'   '}
        {numReviews} <strong>reviews</strong>
      </span>
    </div>
  );
}

export default Rating;
************************************************************************************************************************


Product.js
-----------
************************************************************************************************************************
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';
import { Link } from 'react-router-dom';
import Rating from './Rating';

function Product(props) {
  const { product } = props;

  return (
    <Card>
      <Link to={`/product/${product.name}`}>
        <img className="card-img-top" src={product.image} alt={product.name} />
      </Link>
      <Card.Body>
        <Link to={`/product/${product.name}`}>
          <Card.Title> {product.name} </Card.Title>
        </Link>
        <Rating rating={product.rating} numReviews={product.numReviews} />
        <Card.Text>{<strong>${product.price}</strong>}</Card.Text>
        <Button> Add to cart </Button>
      </Card.Body>
    </Card>
  );
}

export default Product;

************************************************************************************************************************


index.html
************************************************************************************************************************
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
************************************************************************************************************************

index.css
************************************************************************************************************************
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: lightgrey;
}

.site-container {
  min-height: 100vh;
}

main {
  flex: 1; /* Divides the nav, main, and footer sections */
}

.btn-primary {
  background-color: #f0c040;
  color: #000000;
}

.products {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
}

.product {
  border: 1px #404040 solid;
  margin: 1rem;
}

.product img {
  width: 100%;
  max-width: 400px;
}

.product-info {
  padding: 1rem;
}

.link {
  text-decoration: none;
}

.rating span {
  color: #ffc000;
}
************************************************************************************************************************

=======================================================
Save Changes and Push it to Github : Update log file 9
=======================================================

147) Go to Marxx folder
148) git add .
149) git commit -m "Create Rating and Product Component and adding Bootstrap to HomeScreen.js"
150) git push origin main


================================================
Create Product Details Screen ( Product Screen )
================================================

151) Go to Marxx/frontend/src/screens/HomeScreen.js and copy the ( reducer ) function, the code for ( useReducer ) as well as ( useEffect ) and paste it in ( ProductScreen.js ) 
153) Go to ( ProductScreen.js ) and modify the code to work by importing the imports, and making the following changes:
153a) Change products to product in the useReducer hook
153b) Change the GET request link to ( `/api/products/name/${name}` )
153c) Add ( name ) to the dependency list of the useEffect so that useEffect runs everytime there's an update to ( name ) in the url
154) Go to Marxx/backend/server.js and make a GET request to ( '/api/products/name/:name' ) that returns 
the product that has the request url name on the backend, or sends an error message if the request product name doesn't exist
155) Go to (ProductScreen.js) and render the ( product, loading, and error ) fields in the JSX
156) To display the fields of ( product ), create a 3 column layout in a Row container as follows: ( <Row> <Col> </Col> <Col> </Col> Col> </Col> </Row> ) 
157) For the first Col Container ( <Col> ) Display the image of the Product as well as the name.
158) For the second Col Container, create a list Group Container that holds the name, rating, number of reviews, price, and description of the product
159) For the third Col Container, create a card that contains inventory data such as the price and status of the product using a List Group Container
160) Go to Marxx/frontend/src/App.js and add margin to the top of the screen by setting the Container container ( <Container> ) className to mt-5


ProductScreen.js
----------------
*********************************************************************************************************
import axios from 'axios';
import { useEffect, useReducer } from 'react';
import Col from 'react-bootstrap/Col';
import Row from 'react-bootstrap/Row';
import ListGroup from 'react-bootstrap/ListGroup';
import Button from 'react-bootstrap/Button';
import Badge from 'react-bootstrap/Badge';
import Card from 'react-bootstrap/Card';
import { useParams } from 'react-router-dom';
import Rating from '../components/Rating';

const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true }; // Update loading to true while keeping the previous state the same
    case 'FETCH_SUCCESS':
      return { ...state, loading: false, product: action.payload }; // Update product with the data from the backend found in ( action.payload )
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload }; // Sets the error field with the data from the backend
    default:
      return state; // returns current state
  }
};

function ProductScreen() {
  const params = useParams();
  const { name } = params; // get the name parameter from the url (params)

  const [{ loading, error, product }, dispatch] = useReducer(reducer, {
    loading: true,
    error: '',
    product: [],
  });

  // Runs the function once after rendering the components
  useEffect(() => {
    const fetchData = async () => {
      dispatch({ type: 'FETCH_REQUEST' });
      try {
        const result = await axios.get(`/api/products/name/${name}`); // Sends an AJAX request to the requested address
        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });
      } catch (err) {
        dispatch({ type: 'FETCH_FAIL', payload: err.message });
      }
    };
    fetchData();
  }, [name]);

  return loading ? (
    <div>Loading...</div>
  ) : error ? (
    <div>{error}</div>
  ) : (
    <div>
      <h1> {name} </h1>
      <Row>
        <Col md={6}>
          <img className="img-large" src={product.image} alt={product.name} />
        </Col>

        <Col md={3}>
          <ListGroup variant="flush">
            <ListGroup.Item>
              <h1> {product.name} </h1>
            </ListGroup.Item>

            <ListGroup.Item>
              <Rating
                rating={product.rating}
                numReviews={product.numReviews}
              ></Rating>
            </ListGroup.Item>

            <ListGroup.Item>Price : ${product.price}</ListGroup.Item>

            <ListGroup.Item>
              Description : <p>{product.description}</p>
            </ListGroup.Item>
          </ListGroup>
        </Col>

        <Col md={3}>
          <Card>
            <Card.Body>
              {/* Made to be flush to remove outer borders and rounded corners, 
              making list group items appear edge-to-edge within a contain, such as a card */}
              <ListGroup variant="flush">
                <ListGroup.Item>
                  <Row>
                    <Col> Price: </Col>
                    <Col> ${product.price} </Col>
                  </Row>
                </ListGroup.Item>

                <ListGroup.Item>
                  <Row>
                    <Col> Status: </Col>
                    <Col>
                      {product.countInStock > 0 ? (
                        <Badge bg="success"> In Stock </Badge>
                      ) : (
                        <Badge bg="danger"> Unavailable </Badge>
                      )}
                    </Col>
                  </Row>
                </ListGroup.Item>

                {product.countInStock > 0 && (
                  <ListGroup.Item>
                    <div className="d-grid">
                      <Button variant="primary">Add to Cart</Button>
                    </div>
                  </ListGroup.Item>
                )}
              </ListGroup>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </div>
  );
}

export default ProductScreen;
*********************************************************************************************************

server.js
---------

***********************************************************************************************************
import express from 'express';
import data from './data.js';

const app = express(); // Initializes a new instance of an Express App

// Returns a list of products when the user makes a GET request to /api/products
app.get('/api/products', (req, res) => {
  res.send(data.products);
});

app.get('/api/products/name/:name', (req, res) => {
  // Checks whether the request product name is in the backend
  // If it exist then the product will be returned otherwise will get an error message
  const product = data.products.find((x) => x.name === req.params.name);

  if (product) {
    res.send(product);
  } else {
    res.status(404).send({ message: 'Product Not Found' });
  }
});
const port = process.env.PORT || 5000;

// Starts Server
app.listen(port, () => {
  console.log(`server at http://localhost:${port}`);
});
***********************************************************************************************************

=======================================================
Save Changes and Push it to Github : Update log file 10
=======================================================

161) Go to Marxx folder
162) git add .
163) git commit -m "Create Product Details Screen ( Product Screen ) "
164) git push origin main


=====================================
Create Message and Loading component
=====================================

165) Create Loading Component
165a) Go to Marxx/frontend/src/components and create a file called ( LoadingBox.js ) that will be used as the loading Component
165b) Inside ( LoadingBox.js ), create a component that returns a Spinner container ( <Spinner> ) that has animation set to border, role set to status
and inside the Spinner Container create a span tag that has the className attribute set to visually-hidden while displaying the text Loading... inside the span tag
165c) import the spinner package ( import 'react-bootstrap/Spinner'; )
165d) Replace the Loading text in ( HomeScreen.js ) and ( ProductScreen.js ) with the LoadingBox component ( <LoadingBox> )
166) Create Message Component
166a) Go to Marxx/frontend/src/components and create a file called ( MessageBox.js ) that will be used as the Message Box Component that will be used to display relevant messages to the user
166b) Inside the MessageBox component return ( <Alert variant={props.variant || 'info'}> {props.children} </Alert>; )
166c) Add import ( import Alert from 'react-bootstrap/Alert'; )
166d) Replace the error variable in ( HomeScreen.js ) and ( ProductScreen.js ) with the MessageBox component ( <MessageBox> )
166e) Type in an incorrect url to text if the Message Box displays an error message
167) Go to Marxx/frontend/src and create a file called ( utils.js ) that will hold all the utilities functions otherwise known as helper functions
168) Create a function called ( getError ) that accepts an error object that returns the message content if set on the backend otherwise will return the general error message
169) Replace ( err.message ) in the payload of fetchData inside the useEffect hook with ( getError ) function from utils.js in both ( HomeScreen.js ) and ( ProductScreen.js )
170) Import ( getError ) function in both ( HomeScreen.js ) and ( ProductScreen.js )


utils.js
--------
*******************************************************************************
// Returns the error message on the backend if it exist, otherwise will return
// the general error message from the error object like a 404 error message

export const getError = (error) => {
  return error.response && error.response.data.message
    ? error.response.data.message
    : error.message;
};
*******************************************************************************


HomeScreen.js
-------------
*******************************************************************************
import { useEffect, useReducer } from 'react';
import axios from 'axios';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Product from '../components/Product';
import LoadingBox from '../components/LoadingBox';
import MessageBox from '../components/MessageBox';
import { getError } from '../utils';

const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true }; // Update loading to true while keeping the previous state the same
    case 'FETCH_SUCCESS':
      return { ...state, loading: false, products: action.payload }; // Update products with the data from the backend found in ( action.payload )
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload }; // Sets the error field with the data from the backend
    default:
      return state; // returns current state
  }
};

function HomeScreen() {
  const [{ loading, error, products }, dispatch] = useReducer(reducer, {
    loading: true,
    error: '',
    products: [],
  });

  // Runs the function once after rendering the components
  useEffect(() => {
    const fetchData = async () => {
      dispatch({ type: 'FETCH_REQUEST' });
      try {
        const result = await axios.get('/api/products'); // Sends an AJAX request to the requested address
        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });
      } catch (err) {
        dispatch({ type: 'FETCH_FAIL', payload: getError(err) });
      }
    };
    fetchData();
  }, []);

  return (
    <div>
      <h1> List of Products </h1>
      <div className="products">
        {loading ? (
          <LoadingBox />
        ) : error ? (
          <MessageBox variant="danger"> {error} </MessageBox>
        ) : (
          <Row>
            {products.map((product) => (
              <Col
                key={product.name}
                xs={12}
                sm={6}
                md={4}
                lg={3}
                className="mb-3"
              >
                <Product product={product}></Product>
              </Col>
            ))}
          </Row>
        )}
      </div>
    </div>
  );
}

export default HomeScreen;
*******************************************************************************


ProductScreen.js
-----------------
*******************************************************************************
import axios from 'axios';
import { useEffect, useReducer } from 'react';
import Col from 'react-bootstrap/Col';
import Row from 'react-bootstrap/Row';
import ListGroup from 'react-bootstrap/ListGroup';
import Button from 'react-bootstrap/Button';
import Badge from 'react-bootstrap/Badge';
import Card from 'react-bootstrap/Card';
import { useParams } from 'react-router-dom';
import Rating from '../components/Rating';
import LoadingBox from '../components/LoadingBox';
import MessageBox from '../components/MessageBox';
import { getError } from '../utils';

const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true }; // Update loading to true while keeping the previous state the same
    case 'FETCH_SUCCESS':
      return { ...state, loading: false, product: action.payload }; // Update product with the data from the backend found in ( action.payload )
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload }; // Sets the error field with the data from the backend
    default:
      return state; // returns current state
  }
};

function ProductScreen() {
  const params = useParams();
  const { name } = params; // get the name parameter from the url (params)

  const [{ loading, error, product }, dispatch] = useReducer(reducer, {
    loading: true,
    error: '',
    product: [],
  });

  // Runs the function once after rendering the components
  useEffect(() => {
    const fetchData = async () => {
      dispatch({ type: 'FETCH_REQUEST' });
      try {
        const result = await axios.get(`/api/products/name/${name}`); // Sends an AJAX request to the requested address
        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });
      } catch (err) {
        dispatch({ type: 'FETCH_FAIL', payload: getError(err) });
      }
    };
    fetchData();
  }, [name]);

  return loading ? (
    <LoadingBox />
  ) : error ? (
    <MessageBox variant="danger"> {error} </MessageBox>
  ) : (
    <div>
      <h1> {name} </h1>
      <Row>
        <Col md={6}>
          <img className="img-large" src={product.image} alt={product.name} />
        </Col>

        <Col md={3}>
          <ListGroup variant="flush">
            <ListGroup.Item>
              <h1> {product.name} </h1>
            </ListGroup.Item>

            <ListGroup.Item>
              <Rating
                rating={product.rating}
                numReviews={product.numReviews}
              ></Rating>
            </ListGroup.Item>

            <ListGroup.Item>Price : ${product.price}</ListGroup.Item>

            <ListGroup.Item>
              Description : <p>{product.description}</p>
            </ListGroup.Item>
          </ListGroup>
        </Col>

        <Col md={3}>
          <Card>
            <Card.Body>
              {/* Made to be flush to remove outer borders and rounded corners, 
              making list group items appear edge-to-edge within a contain, such as a card */}
              <ListGroup variant="flush">
                <ListGroup.Item>
                  <Row>
                    <Col> Price: </Col>
                    <Col> ${product.price} </Col>
                  </Row>
                </ListGroup.Item>

                <ListGroup.Item>
                  <Row>
                    <Col> Status: </Col>
                    <Col>
                      {product.countInStock > 0 ? (
                        <Badge bg="success"> In Stock </Badge>
                      ) : (
                        <Badge bg="danger"> Unavailable </Badge>
                      )}
                    </Col>
                  </Row>
                </ListGroup.Item>

                {product.countInStock > 0 && (
                  <ListGroup.Item>
                    <div className="d-grid">
                      <Button variant="primary">Add to Cart</Button>
                    </div>
                  </ListGroup.Item>
                )}
              </ListGroup>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </div>
  );
}

export default ProductScreen;

*******************************************************************************


LoadingBox.js
-------------
*******************************************************************************
import Spinner from 'react-bootstrap/Spinner';

export default function LoadingBox() {
  return (
    <Spinner animation="border" role="status">
      <span className="visually-hidden">Loading</span>
    </Spinner>
  );
}
*******************************************************************************


MessageBox.js
-------------
*******************************************************************************
import Alert from 'react-bootstrap/Alert';

function MessageBox(props) {
  return <Alert variant={props.variant || 'info'}> {props.children} </Alert>;
}

export default MessageBox;
*******************************************************************************

=======================================================
Save Changes and Push it to Github : Update log file 11
=======================================================

171) Go to Marxx folder
172) git add .
173) git commit -m "Create Message and Loading component"
174) git push origin main