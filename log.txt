===========================
Setup ( Create React App )
===========================

1) mkdir Marxx - Creates Marxx folder
2) cd Marxx - Goes into Marxx folder
3) touch log.txt - Creates a text file called log to log all commands used to create this project.

----------------------------------------
Removes and re-install create-react-app
----------------------------------------
4) npm uninstall -g create-react-app
5) npx clear-npx-cache
6) npm i create-react-app
----------------------------------------
7) npx create-react-app@latest frontend - Creates React App called Marxx


==============
Testing
==============

8) cd frontend - goes into frontend folder
9) npm start - Starts React application name frontend

-----------------------------------------------------------------
Line 9 Gives Error ( Something is already running on port 3000 )
-----------------------------------------------------------------
10) npx kill-port 3000 - Kills the process running on port 3000
11) npm start - Starts React app ( Works! )


========================================
Remove Unnecessary Files from React App
========================================

11) Go to frontend / src / App.js
12) Remove all content under the header tag ( <header /> ), className(s), and the imports.
13) Create an anchor tag to link to the root ( / ) of the application and name it marxx.
14) Create a main section ( <main />) ) and place List products inside below the header tag. 
15) Go to frontend / src / index.css
16) Remove the code element
17) Create a header element and add properties: background-color, and padding
18) Set the anchor link inside header color property to white, and 
	text-decoration to none ( Removes underline ), font-weight to bold
	and font-size to 2rem.


==============================================
Create a Git Repository and Push it to Github
==============================================

19) Remove the git file from frontend and create another git file in the root direction ( Marxx )
20) cd frontend  -   Goes to frontend folder
21) rm -rf .git  -   Removes the git file
22) Move the .gitignore file from frontend to Marxx. ( Drag and drop method in VS code )
23) Go to .gitignore and remove the forward slash ( / ) from node_modules and build to ignore all sub folders inside node_modules and build folders .
24) cd ..       - Go to Marxx folder which is one directory above frontend folder 
25) git init    -  Initialize Repo
26) git add .   - Tracks All Files
27) git commit -m "initial commit"  -  Commit first message
28) git status  -  Checks the status of the files in the repo
29) Create a cloud Repo by going to github.com and log in
30) Create a new Repo ( Click on the new icon, go to github.com/new if you can't find the icon )
31) Name Repo Marxx, set view to public, add a README file then click create repository.

--------------------------------------------------
Push an existing repository from the command line
--------------------------------------------------

32) git remote add origin https://github.com/chevano/Marxx.git  - Establishing a remote connection with GitHub
33) git branch -M main
34) git push -u origin main ( Complains about wrong credentials because it needs a token instead of a password )

------------------------
Resolve merge conflict
------------------------

35) Go to settings by clicking on the profile pic icon
36) Click Developer settings
37) Click on Personal access tokens and select tokens (classic)
38) Generate token and add the token instead of a password when running line 34 again
39) After running line 34 you will then run into a merge conflict type the following commands:
39a) git reset --mixed origin/main
39b) git add.
39c) git commit -m "Resolving merge conflict"
39d) git push origin main

Note: git reset --mixed origin/main can also be written git reset origin/main, since the mixed option is the default one when using git reset.


============================================================
Home Screen : Create a List of Products using a card layout
============================================================

---------------------------
Create products array
---------------------------

40a) Go to Marxx / frontend / src and create a file called data.js
40b) Inside data.js create an object called ( data ) of type const, that contains an array of objects to store a list of products, where this array of objects is called ( products ) and have the following fields: 
	( name, category, image, price, countInStock, brand, rating, numReviews, description ).


-----------------------
Add product images
-----------------------

41a) cd Marxx/frontend/public - Go to Marxx / frontend / public
41b) mkdir images             - Create a folder called images 
41c) Populate the folder with some pics

--------------------
Render products
--------------------

42a) Go to Marxx / frontend / src / App.js
42b) Use a map function to loop and display the products inside the data array

-------------------
Style products
-------------------

43a) Go to Marxx / frontend / src / index.css
43b) Style the products, and products className using flexbox to lay them out along the x-axis.

=======================================================
Save Changes and Push it to Github : Update log file 2
=======================================================
44) git add .
45) git commit -m "Create List Products and an Array of Products"
46) git push origin main



========================================================================
Home Screen : Implement Routing to configure routes for different pages
========================================================================

47) cd Marxx/frontend  -  Go to Marxx / frontend
48) npm i react-router-dom  -  Install routing package ( Enables routing in react applications )
49) Go to reactrouter.com and looking under the Routers Section for how to implement BrowserRouter
50) Go to Marxx / frontend / src / App and wrap the content of App() inside BrowserRouter and implement Routes, and Route as follow:
51) cd Marxx/frontend/src   -   Go to Marxx / frontend / src
52) Create a folder called ( screens ) and 2 files namely; ( HomeScreen.js ) and ( ProductScreen.js )
53) Create a functional component for both HomeScreen.js and ProductScreen.js that reads Home Screen, Product Screen respectively. 
54) Place all the code inside App() below <Routes> from Marxx/frontend/src/App inside HomeScreen from Marxx/frontend/src/screens/HomeScreen.js
55) Inside ProductScreen() use the ( useParams ) hook to get the ( name ) parameter from the url
56) Change all ( a ) tags to ( Link ) tags to remove the page refresh and also because we are now using react-router-dom.



=======================================================
Save Changes and Push it to Github : Update log file 3
=======================================================

57) Go to Marxx folder
58) git add .
59) git commit -m "Implement Routing"
60) git push origin main

=======================================================
Save Changes and Push it to Github : Update log file 4
=======================================================

Log file did not Update
-----------------------
61) Go to Marxx folder
62) git add .
63) git commit -m "Updating log file 4"
64) git push origin main

=======================================================
Home Screen : Create a Backend API using NodeJS Server
=======================================================

65) cd Marxx  -  Go to root folder ( Marxx )
66) mkdir backend - Creates a folder called ( backend ) in the root directory
67) cd backend  -  Go to ( backend ) folder, where we will create a nodejs project
68) npm init  -  Initialize a project and create the package.json file
69) Press Enter to every prompt to accept the default settings
70) Inside the ( package.json ) file, after the name property, put a comma and add the command ( "type": "module")
which tells Node.js to interpret .js files within that package as using ES module syntax.
71) Create a ( server.js ) file inside backend folder to hold all the server related code like installing and using express.js
72) npm install express  -  Installs the express server ( express.js ), which will create ( node_modules ) folder and ( package-lock.json ) file inside the ( backend ) folder
73) Copy ( data.js ) file from Marxx/frontend/src to Marxx/backend  ( will remove duplicates later )
74) Create a server inside ( server.js ) file using express as follows:
75) Note all .js files in server should have the .js extention on every imports
76) run node server.js  -  Starts backend server
77) run npm install nodemon --save-dev  -  Install nodemon to update the server whenever you have a change in the code inside the ( backend ) folder
78) Press control + c to stop server
79) Go to Marxx/backend/package.json and add the command ( "start": "nodemon server.js" ) inside "scripts"
80) run npm start  -  After adding the above command we don't need to use ( nodemon server.js or node server.js ) to start the server

=======================================================
Save Changes and Push it to Github : Update log file 5
=======================================================

81) Go to Marxx folder
82) git add .
83) git commit -m "Create a Backend API using NodeJS Server"
84) git push origin main


==========================================
Home Screen : Fetch Products from Backend
==========================================

85) Go to Marxx/frontend/package.json
86) Inside ( package.json ) file add the following command ( "proxy": "http://localhost:5000" )
87) npm install axios  -  Run command inside Marxx/frontend folder. Is an HTTP client that simplifies making API calls
88) Go to Marxx/frontend/src/HomeScreen
89) Create a useState hook called ( [products, setProducts] ) to manage the state of the products on the backend, where the default value is an empty array ( [] )
90) Use useEffect() and axios to fetch the data from the backend as follows:
91) Remove the duplicate data.js file from Marxx/frontend/src/data.js
92) run npm start in the backend and frontend folder
93) To ensure that the list of products is coming from the backend, inspect the page on http://localhost:3000 and go to Network and select Fetch / XHR


=======================================================
Save Changes and Push it to Github : Update log file 6
=======================================================

94) Go to Marxx folder
95) git add .
96) git commit -m "Retrieve data from the Backend"
97) git push origin main

================================================================================
Home Screen : Replacing useState with useReducer Hooks to manage complex states
================================================================================

98) Go to Marxx/frontend/src/sreens/HomeScreen
99) Above the HomeScreen functional component define a reducer function called ( reducer ) that will handle the following states:
99a) Create a Failed State called ( FETCH_FAIL ) 
99b) Create a Successful State called ( FETCH_SUCCESS)
99c) Create a Pending State, where the user makes a request called ( FETCH_REQUEST )
99d) And a default state where the user does something else 
99e) Create and set the following fields inside the reducer for each state; loading, products, and error.
100) Replace the useState hook ( [products, setProducts ] = useState([]) ) with a useReducer hook that sets the default state of ( loading ) to true, ( error ) to an empty string, and ( products ) to an empty array.
101) Get State from useReducer by making a call to the ( dispatch ) function, dispatching an action inside the ( fetchData() )
102) Render the loading, and error variables as needed in the JSX in Marxx/frontend/src/screens/HomeScreen
103) For debugging purposes install a logger called ( use-reducer-logger )
104) Go to Marxx/frontend
105) npm install use-reducer-logger --force
106) import logger from 'use-reducer-logger
107) Sample Code listed below


=======================================================
Save Changes and Push it to Github : Update log file 7
=======================================================

108) Go to Marxx folder
109) git add .
110) git commit -m "Replacing useState with useReducer Hooks to manage complex states"
111) git push origin main

=====================================
Bootstrap : Add Bootstrap to project
=====================================

112) Go to react-bootstrap.github.io and click get started and follow the instructions
113) Go to Marxx/frontend 
114) Run npm install react-bootstrap bootstrap  -  Install React Bootstrap package
115) Go to Marxx/frontend/src/App.js and Update the file as follows
116) Inside the ( header ) element, create a Navbar component using boostrap Navbar
117) Include imports for navbar namely ( react-bootstrap/Navbar ), Container namely ( react-bootstrap/Container ), and LinkContainer namely ( react-router-boostrap )
118) Update Marxx/frontend/src/index.css and remove all the styling for the header tag
119) Go to Marxx/frontend/src/index.js and import bootstrap before ( index.css ) the import is as follows import ( 'bootstrap/dist/css/bootstrap.min.css' )
120) Go to Marxx/frontend/src/App.js and wrap the main tag inside a Container component (<Container>) to create a nice alignment between the nav section and the main section.
121) Add a footer element below the main element and inside the footer element add some content.
122) Use react bootstrap flexbox to divide up the nav, main, and footer sections by adding styles ( "d-flex flex-column site-container" ) 
inside the main div in ( App.js ), where site-container is a className created to set the ( min-height to 100vh ) in ( index.css )


=======================================================
Save Changes and Push it to Github : Update log file 8
=======================================================

123) Go to Marxx folder
124) git add .
125) git commit -m "Add Bootstrap to Project"
126) git push origin main

======================================================================================
Bootstrap : Create Rating and Product Component and adding Bootstrap to HomeScreen.js
======================================================================================

127) Before Creating the Rating and Product Component go to Marxx/frontend/src/screens/Homescreen.js and replacing the css styling with bootstrap styling
128) Wrap ( products.map ) inside a Row container ( <Row> ) and inside the Row Container add a pair of curly braces
129) Below ( products.map ) add a Col container  ( <Col> ) that wraps the remaining code of ( products.map )
130) Add the following imports to add Row and Col Container respectively ( import Row from 'react-bootstrap/Row' ), ( import Col from 'react-bootstrap/Col' )
131) Remove the code inside ( <Col> ) and use it to create a component called ( Products ) for reusability later.
132) Go to Marxx/frontend/src and create a folder called ( components ) and inside the ( components ) folder, add a file called ( Product.js ), which signifies a react component
133) Go to Marxx/frontend/src/component/Product.js
134) Create a Product Component using the code snippet cut inside the Col component ( <Col> )
135) Inside the ( Product ) Component replace the main div with a card component ( <Card> )
136) Set the img tag className to ("card-img-top" ), which makes the image stick to the top of the card
137) Wrap the Remaining code inside a Card.Body component ( <Card.Body> ) and make the following changes:
137a) Replace the p tag that displays the name with a Card.Title component ( <Card.Title> )
137b) Replace the other p tag that displays the price with a Card.Text component ( <Card.Text> )
137c) Replace the html element button ( <button> ) tag with a react-bootstrap component button ( <Button> )
138) Add the import for the Button component ( import Button from 'react-bootstrap/Button' )
139) Below the ( Link ) component that contains the name of the product ( product.name ) add a Rating component ( <Rating> ) with rating and numReviews properties
140) Go to Marxx/frontend/src/component and create a file called ( Rating.js ) that signifies a react component
141) Go to Marxx/frontend/src/component/Rating.js and Define a component called ( Rating ) that deconstruct the ( rating ) and ( numReviews ) properties and displays them in JSX 
142) Use font Awesome to display stars in the JSX
143) Go to Marxx/frontend/public/index.html, in the header section add a link to connect to font awesome cdn
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
144) Import ( Rating ) component inside ( Product ) component using ( import Rating from './Rating' )
145) Go to Marxx/frontend/src/index.css and target all the span tags inside rating className to change the color of the stars displayed to gold
146) In index.css type ( .btn-primary { background-color: #f0c040; color: #000000;})


=======================================================
Save Changes and Push it to Github : Update log file 9
=======================================================

147) Go to Marxx folder
148) git add .
149) git commit -m "Create Rating and Product Component and adding Bootstrap to HomeScreen.js"
150) git push origin main


================================================
Product Screen : Create Product Details Screen
================================================

151) Go to Marxx/frontend/src/screens/HomeScreen.js and copy the ( reducer ) function, the code for ( useReducer ) as well as ( useEffect ) and paste it in ( ProductScreen.js ) 
153) Go to ( ProductScreen.js ) and modify the code to work by importing the imports, and making the following changes:
153a) Change products to product in the useReducer hook
153b) Change the GET request link to ( `/api/products/name/${name}` )
153c) Add ( name ) to the dependency list of the useEffect so that useEffect runs everytime there's an update to ( name ) in the url
154) Go to Marxx/backend/server.js and make a GET request to ( '/api/products/name/:name' ) that returns 
the product that has the request url name on the backend, or sends an error message if the request product name doesn't exist
155) Go to (ProductScreen.js) and render the ( product, loading, and error ) fields in the JSX
156) To display the fields of ( product ), create a 3 column layout in a Row container as follows: ( <Row> <Col> </Col> <Col> </Col> Col> </Col> </Row> ) 
157) For the first Col Container ( <Col> ) Display the image of the Product as well as the name.
158) For the second Col Container, create a list Group Container that holds the name, rating, number of reviews, price, and description of the product
159) For the third Col Container, create a card that contains inventory data such as the price and status of the product using a List Group Container
160) Go to Marxx/frontend/src/App.js and add margin to the top of the screen by setting the Container container ( <Container> ) className to mt-5


=======================================================
Save Changes and Push it to Github : Update log file 10
=======================================================

161) Go to Marxx folder
162) git add .
163) git commit -m "Create Product Details Screen ( Product Screen ) "
164) git push origin main


======================================================
Product Screen : Create Message and Loading component
======================================================

165) Create Loading Component
165a) Go to Marxx/frontend/src/components and create a file called ( LoadingBox.js ) that will be used as the loading Component
165b) Inside ( LoadingBox.js ), create a component that returns a Spinner container ( <Spinner> ) that has animation set to border, role set to status
and inside the Spinner Container create a span tag that has the className attribute set to visually-hidden while displaying the text Loading... inside the span tag
165c) import the spinner package ( import 'react-bootstrap/Spinner'; )
165d) Replace the Loading text in ( HomeScreen.js ) and ( ProductScreen.js ) with the LoadingBox component ( <LoadingBox> )
166) Create Message Component
166a) Go to Marxx/frontend/src/components and create a file called ( MessageBox.js ) that will be used as the Message Box Component that will be used to display relevant messages to the user
166b) Inside the MessageBox component return ( <Alert variant={props.variant || 'info'}> {props.children} </Alert>; )
166c) Add import ( import Alert from 'react-bootstrap/Alert'; )
166d) Replace the error variable in ( HomeScreen.js ) and ( ProductScreen.js ) with the MessageBox component ( <MessageBox> )
166e) Type in an incorrect url to text if the Message Box displays an error message
167) Go to Marxx/frontend/src and create a file called ( utils.js ) that will hold all the utilities functions otherwise known as helper functions
168) Create a function called ( getError ) that accepts an error object that returns the message content if set on the backend otherwise will return the general error message
169) Replace ( err.message ) in the payload of fetchData inside the useEffect hook with ( getError ) function from utils.js in both ( HomeScreen.js ) and ( ProductScreen.js )
170) Import ( getError ) function in both ( HomeScreen.js ) and ( ProductScreen.js )


=======================================================
Save Changes and Push it to Github : Update log file 11
=======================================================

171) Go to Marxx folder
172) git add .
173) git commit -m "Create Message and Loading component"
174) git push origin main


========================================================
Cart Screen : Implement Add to Cart Functionality Start
========================================================

175) Create a Store using React Context
176) Go to marxx/frontend/src
177) Create a file called ( Store.js ) that will act as a react store inside the ( src ) folder
178) Create a Store using createContext() as follows: export const Store = createContext();
179) Define a Store Provider Function and inside the function create a useReducer hook that accepts a reducer called ( reducer ) and a variable to keep track of all the items in the shopping cart called ( initialState )
180) Define a reducer function called ( reducer )
181) Create variable called ( initialState ) that holds a ( cart ) object and inside the cart object, create an array called ( cartItems ) that will hold the list of items in the shopping cart
181) Create a value object that will hold properties (state) and (dispatch) that will be passed to the <Store.Provider> Component
182) Inside the StoreProvider function, return a ( <Store.Provider ) component
183) Go to marxx/frontend/src/index.js 
184) Inside index.js below the ( <React.StrictMode> ) component, wrap the remaining code inside the ( <StoreProvider> ) component
185) Go to marxx/frontend/src/screens/ProductScreen.js
186) Inside ProductScreen.js scroll down at the bottom of the page where the last ( <ListGroup.Item> ) component is and add an onClick handler called ( addToCartHandler)
187) Define the addToCartHandler function at the top of the file
188) Retrieve State, and dispatch properties from useContext()
189) Implement the Cart Badge UI
190) Go to App.js and below the ( <Link> ) component, create a ( <Nav> ) component that consist of the Cart and its Badge
191) Go to ProductScreen and Implement Add to Cart Button and Click Handler


=======================================================
Save Changes and Push it to Github : Update log file 12
=======================================================

192) Go to Marxx folder
193) git add .
194) git commit -m "Implement Add to Cart Functionality Start"
195) git push origin main


========================================================
Cart Screen : Finish Add to Cart Functionality 
========================================================

196) Go to marxx/backend/data.js and add a new field called ( _id ) to each object inside the ( products ) arry inside ( data ) that holds the id for each product
197) Populate the ( _id ) field 
198) Go to marxx/frontend/screens/ProductScreen.js and update the ( cart ) state to send ajax request to the backend
199) Go to marxx/backend/server.js and handle the ajax request that was sent on the frontend in ProductScreen.js
200) Go to marxx/frontend/src/Store.js and fix the current issue of adding the same product multiple times to the cart,
to only adding duplicate item once, while keeping tracking of the product quantity, which will be later display as a badge number
201) Go to marxx/frontend/App.js and update the Cart badge to show the correct number of items in the shopping cart 
by calling the reduce function on ( cart.cartItems ) which holds the number of items in the cart as well as its quantities
202) Go to marxx/frontend/ProductScreen.js and update the ( payload ) in ( ctxDispatch ) to the quantity 
recorded by the onClick handler for the shopping cart namely ( addToCartHandler )


=======================================================
Save Changes and Push it to Github : Update log file 13
=======================================================

202) Go to Marxx folder
203) git add .
204) git commit -m "Finish Add to Cart Functionality"
205) git push origin main


=======================================
Cart Screen : Create Cart Screen Start 
=======================================

206) Go to marxx/frontend/src/screens and create a file called ( CartScreen.js ) that 
will hold the UI for the shopping cart screen
207) Create a functional component inside CartScreen namely ( CartScreen() )
and make a call to useContext(Store) to get the ( state ) prop and ( dispatch ) function
while displaying some message to the screen in the body of the return statement.
208) Create a Single row that span 2 columns, the first column uses 8 out of the 12 units and the
second column uses the remaining 4 units using the <Row> and <Col> bootstrap components
209) In the first column display the list of items in the Shopping Cart or a message if the Shopping Cart is empty
210) Go to marxx/frontend/src/App.js and add a route for the shopping cart screen namely ( cart )
211) Go to marxx/frontend/src/ProductScreen.js and at the bottom of the ( addToCartHandler ) function put a link to direct the users to
go to the CartScreen using the ( useNavigate ) hook
212) Go to marxx/frontend/src/CartScreen.js and in the second column inside the bootstrap row component (<Row>)
set the dimension to the remaining 4 out of 12 units and place a bootstrap card component ( <Card> )  to displace the Subtotal of all the items in the cart



=======================================================
Save Changes and Push it to Github : Update log file 14
=======================================================

213) Go to Marxx folder
214) git add .
215) git commit -m "Create Cart Screen Start"
216) git push origin main


================================================
Cart Screen : Finish creating Cart Screen 
================================================

217) Go to marxx/frontend/src/CartScreen.js and implement an onClick handler 
for plus and minus buttons to increase  and decrease the quantity of an item in the shopping cart
218) Implement an onClick handler for the remove button, to erase an item from the shopping cart
219) Implement an onClick handler for the checkout button, which will direct the user to the checkout wizard page,
if signed in, otherwise will direct the user to sign in then direct them to 
the Checkout Page where they can fill in their credentials for payment
220) Go to marxx/frontend/src/Product.js and create a disable button whenever inventory is out of stock


=======================================================
Save Changes and Push it to Github : Update log file 15
=======================================================

221) Go to Marxx folder
222) git add .
223) git commit -m "Finish creating Cart Screen"
224) git push origin main


================================================
Sign-in Screen : Create Sign-in Screen 
================================================

225) Go to marxx/frontend/src/screens and create a file called ( SigninScreens.js ) that will be the Signin page for all users
226) Create a functional component namely ( SigninScreen ) and 
inside this component create a bootstrap Container component ( <Container> ) with className ( small-container )
227) Go to marxx/frontend/src/index.css and add styling to the className ( small-container )
228) Go to marxx/frontend/src/screens/SigninScreen.js and use a bootstrap form component ( <Form> )
to add Email and Password authentication, along with a sign in button
229) Go to marxx/frontend/src/App.js and create a route for the signing page using the route component ( <Route> )
setting the signin route to ( "/cart/signin")


=======================================================
Save Changes and Push it to Github : Update log file 16
=======================================================

230) Go to Marxx folder
231) git add .
232) git commit -m "Create Sign-in Screen"
233) git push origin main


=======================================================
Database : Connect to MongoDB using mongoose
=======================================================

234) Go to MongoDB website at mongodb.com and log in
235) Create an atlas MongoDB Database by creating a cluster.
236) Click on ( Clusters ) found on the top left-hand side of the screen 
237) Then click ( Browse Collections )
238) Click ( Create Database ) and set Database name to ( marxx ) and Collection name to ( marxx-collection )
239) Click on Clusters and then Connect and then a pop up screen will appear
240) The pop screen reads Connect to your application and has various options, click on Drivers
241) Set Driver to ( Node.js ) and click on the recommended version
242) Copy the connection string in the application, it starts with mongodb+srv:
243) Go to marxx/backend and create an environment variable file name ( .env ) and place the connection string in a variable namely MONGODB_URI
244) In the connection string add the credentials for ( db_username ) and ( db_password )
245) Go to marxx/.gitignore and add the .env file to hide its content
246) Go back to mongodb.com and under SECURITY click on Database Access and select ( + ADD NEW DATABASE USER )
247) Enter a username and password for Password Authentication and use it in the connection string 
248) Set Built-in Role to Read and write to any database and select add user
249) Use the mongoose package to connect mongodb by going to mongoosejs.com and read the docs
250) Go to marxx/backend and run the command npm install mongoose
251) Install dotenv package to load env files in the app by running npm install dotenv in the same directory as mongoose
252) Go to marxx/backend/server.js and include the imports for mongoose and dotenv, namely ( import mongoose from 'mongoose' and import dotenv from 'dotenv' )
253) Connect to mongodb as displayed in the mongoose docs
253a) 

dotenv.config();

mongoose
  .connect(process.env.MONGODB_URI)
  .then(() => {
    console.log('connected to db');
  })
  .catch((err) => {
    console.log(err.message);
  });


=======================================================
Save Changes and Push it to Github : Update log file 17
=======================================================

254) Go to Marxx folder
255) git add .
256) git commit -m "Connect to MongoDB using mongoose"
257) git push origin main


=========================================================
Database : Create Product Model and generate sample data
=========================================================

258) Go to marxx/backend and create a folder to hold all the database models
259) Go to marxx/backend/models and create a file to store the Product 
Model and name it ( productModel.js )
260) Inside marxx/backend/models/productModel create a Database Schema to describe
how the data is being stored and then create a model from the schema using mongoose docs
261) Go to marxx/backend and create a folder to store all the api routes namely ( routes )
262) Go to marxx/backend/routes and create a file to seed the database namely ( seedRoutes.js )
263) Inside marxx/backend/routes/seedRoutes.js, create an express Router that will send a get request to the frontend 
with an array of product models whenever the user go to the homepage
264) Go to marxx/backend/server.js and make a call to the seed api created above namely (seedRouter)
265) Go to marxx/backend/data.js and remove the ( _id ) field from each object inside the product array
because mongodb will automatically generate an ( _id ) field to categorize each object
266) Go to localhost:5000/api/seed to seed the mongodb database
267) Go to marxx/backend/routes and create a file called ( productRoutes.js ) that will hold all the routes that 
perform the CRUD Operations: create, read, update, and delete on the product
268) Go to marxx/backend/server.js and replace all the GET request with the appropriate route handlers, by calling the 
use() method and passing the endpoint and route handler to it. in this case
remove ( app.get('/api/products', (req, res) => { res.send(data.products); }); ) and replace it with ( app.use('/api/products, productRouter') )



=======================================================
Save Changes and Push it to Github : Update log file 18
=======================================================

269) Go to Marxx folder
270) git add .
271) git commit -m "Create Product Model and generate sample data"
272) git push origin main


=========================================================
Database : Create User Model and generate sample data
=========================================================

273) Go to marxx/backend/models and create a file to store the User Model called ( userModel.js )
274) Go to marxx/backend/models/userModel.js and create a user schema then create a user model called ( User )
275) Go to marxx/backend/routes/seedRoutes.js and seed the User model with the data from data.js in the backend
276) Go to marxx/backend/data.js and create sample data for two users, where one is an admin and the other isn't
277) Go to marxx and run the command ( npm i bcryptjs ) to install the bcrypt package, 
which has a brcypt method which is a hashing function primarily used for password storage
278) Go to localhost:5000/api/seed to seed the user data in mongodb database
279) Check mongodb to see if the user table was created, if not drop the table from mongodb and re-seed the database over again


=======================================================
Save Changes and Push it to Github : Update log file 19
=======================================================

280) Go to Marxx folder
281) git add .
282) git commit -m "Create User Model and generate sample data"
283) git push origin main


=============================================================
Sign-in Screen : Create the Backend API for the Sign-in Page 
=============================================================

284) Go to marxx/backend/routes and create a route for all users namely ( userRoutes.js )
285) Go to marxx/backend/routes/userRoutes.js and create a post method with endpoint ( '/signin' ) 
to store all the newly created data retrieved from the frontend onto the backend. In addition wrap
the callback function inside the post method with an ( expressAsyncHandler ) function 
to store all the errors if any occurs inside the callback function. 
286) Go to marxx/backend and run the command ( npm install express-async-handler ) to include the error handling package ( expressAsyncHandler )
287) Go to marxx/backend/server.js and simplify the error received in the expressAsyncHandler function as follows:
( import express from 'express'; const app = express(); app.use( (err, req, res, next) => { res.status(500).send({ message: err.message }) });
288) Go to marxx/backend and run the command ( npm install jsonwebtoken ) to install json web token package to authenticate the data being transmitted
289) Inside marxx/backend create a file called ( utils.js ) that will store all the utility functions used on the backend
290) Go to marxx/backend/utils.js and create a function called ( generateToken ) that will use json web token ( jwt ) signature to sign the data being transmitted for secure transmission
which will be used later for authentication and authorization.
291) Go to marxx/backend/.env and create an environment variable to be used as a secret key to sign the json web token namely ( JWT_SECRET ) and assign it a value
292) Go to marxx/backend/server.js and make a call to the use method and pass the user route endpoint as well as userRouter
293) Inside server.js, write the following to ensure json web token works:
( import express from 'express';  const app = express();  app.use(express.json());  app.use(express.urlencoded({ extended: true })); )
294) Download REST Client from google chrome store to test the endpoints in the user routes or Postman. In this app I used REST client from the chrome store.
295) Set method to POST, set the endpoint to ( localhost:5000/api/users/signin ),
Look inside Headers and ensure the following are set accordingly: 
Name is set to Content-Type, and Value is set to application/json; charset=utf-8
Inside the body create an object with the sign in credentials of email and password and check the response object below
Sample Data for the body to test the above endpoint:
{
  "email":"chevanogordon@gmail.com"
  "password": "12345678"
}
296) Remember to turn on the backend server in terminal using the following command: ( npm start )
297) Endpoint works!


=======================================================
Save Changes and Push it to Github : Update log file 20
=======================================================

298) Go to Marxx folder
299) git add .
300) git commit -m "Create the Backend API for the Sign-in Page"
301) git push origin main


=========================================
Sign-in Screen : Complete Sign-in Screen 
=========================================

302) Go to marxx/frontend/src/screens/SigninScreen.js and add an ( OnSubmit ) attribute 
to the bootstrap Form component ( <Form> ) along with its corresponding handler namely ( submitHandler ) 
to submit the data that is being received on the frontend onto the backend
303) Inside SigninScreens.js add two useState hooks to retrieve the email and password from the user in the form.
304) Add an ( onChange ) attribute to ( <Form.Control> ) to retrieve the email and password from the user,
along with its corresponding function to set the onChange attribute
305) Make a Call to ( useContext(Store) ) to share the data that is being recieved from the form, across the component tree
then make another call to the ( dispatch ) function, which is re-named to ctxDispatch and pass the required type and payload
306) Go to marxx/frontend/src/Store.js to define the type and payload inside the dispatch function
307) Go to marxx/frontend/src/screens/SigninScreens.js and make a call to localStorage function to save the user info that is
being submitted through the form in the browser so you can use it again when trying to log in
308) In SigninScreens.js, redirect users to the redirect variable created earlier by using the useNavigate hook
309) Test to see if you get redirect to shipping page and successfully signed in and whether
you get an alert with an incorrect credential log in
310) Works!
311) Go to marxx/frontend/src/App.js to display the user's name whenever they are log in
312) Inside App.js create a drop down menu that shows the option of a profile page and an order history page along with a signout link button
313) Make a call to the useContext() hook to share the signout data across the component tree and make a call to ctxDispatch to trigger useContext
314) Go to marxx/frontend/src/Store.js and define the use case for signing out
315) Go to marxx/frontend/src/App.js and make a call to localStorage.removeItem() function 
to remove the user credentials from the browser whenever the user is logged out
316) Go to marxx/frontend/src/Store.js and add ( userInfo ) which is the user sign in credentials in the ( initialState ) variable
317) Go to marxx/frontend/src/screens/SigninScreen.js and add a useEffect hook to redirect the user from the sign-in when already logged-in to the ( redirect ) variable
318) Go to marxx/frontend and run the following command ( npm i react-toastify ), where toastify is a library use to display temporary, unobstrusive notifications.


=======================================================
Save Changes and Push it to Github : Update log file 21
=======================================================

319) Go to Marxx folder
320) git add .
321) git commit -m "Complete Sign-in Screen"
322) git push origin main


=======================================================
Checkout Wizard : Create Shipping Screen
=======================================================

323) Go to marxx/frontend/src/screens and create a file called ( ShippingAddressScreen.js ) which will be used as the Shipping Address Page
324) Inside ShippingAddressScreen.js create a functional component called ( ShippingAddressScreen() ), which is the Shipping Page UI that does the following:
a) Create a div with className container small-container respectively to endclosed all the data
b) Create an h1 element with text Shipping Adddress
c) Create a Form to send the data receive on the frontend to the backend
d) The fields of the form are ( Full Name, Address, City, Postal Code, Country )
e) Create a handler called (submitHandler) for the Form onSubmit attribute
f) Create a useState hook called ( fullName, address, city, postalCode, country ) 
to store the Full Name, Address, City, Postal Code and Country of the user
g) Populate the Form.Control value field with ( fullName, address, city, postal code, and country ),
and set onChange field with the appropriate useState setter function for ( fullName, address, city, postal code, and country )
h) Add a bootstrap primary button 
325) Go to marxx/frontend/src/App.js and create a route for the shippingAddressScreen Page namely ( /shipping )
326) Go to marxx/frontend/src/screens/ShippingAddressScreen.js and dispatch an action with type ( SAVE_SHIPPING_ADDRESS )
and set the payload to the useState hooks ( fullName, addresss, city, postalCode, and country).
In addition, store these hooks in the localStorage ( browser ) with key ( shippingAddress ) then go to the Payment Page using ( navigate("/paymnet") )
327) Go to marxx/frontend/src/Store.js and define the action behavior for the dispatch function type ( SAVE_SHIPPING_ADDRESS )
328) Go to marxx/frontend/src/screens/ShippingAddressScreen.js and destruct the shippingAddress object from the cart object which is inside the state object of the useContext hook
329) Populate the useState fields with the data from the shippingAddress object inside the state object
330) Use the useEffect hook to ensure that only users that are log-in can see the shipping page
331) Go to marxx/frontend/src/App.js and remove the data from the browser whenever the user sign-out, using localStorage.removeItem function in side the signoutHandler
332) Go to marxx/frontend/src/Store.js and under dispatch type "USER_SIGNOUT", set cartItems to an empty array, and shippingAddress to an empty object inside the cart object
333) Go to marxx/frontend/src/components and create a file called ( CheckoutStep.js ) which is a UI that will be used in the Checkout Wizard process to let a user know where they in the Check out process
334) Create a bootstrap row container ( <Row> ) with className ( checkout-steps ) to enclose all the data
Inside ( <Row> ) create 4 bootstrap col container ( <Col> ) and set the className to active depending on whether the user is in step1, step2, step3, or step4,
where step1 through step4 is retrieve from props. 
For clarity; 
step1 signifies that the user is in the Sign-In Phase
step2, is when the user is in the Shipping Phase
step3, is when the user is in the Payment Phase
step4, is when the user is in the Place an Order Phase
335) Go to marxx/frontend/src/index.css and add the styling for the className ( checkout-steps )
336) Go to marxx/frontend/src/screens/SigninScreen.js and marxx/frontend/src/screens/ShippingAddressScreen.js and include the CheckoutSteps component


=======================================================
Save Changes and Push it to Github : Update log file 22
=======================================================

337) Go to Marxx folder
338) git add .
339) git commit -m "Create Shipping Screen"
340) git push origin main


=======================================================
Checkout Wizard : Create Sign-Up Screen
=======================================================

341) Go to marxx/frontend/src/screens and create a file called SignupScreen.js
342) Inside SigninScreen.js create a functional component with 4 useState hooks,
name, email, password, confirmPassword to retrieve these inputs from the user
343) Create a bootstrap container component ( <Container> ) with className small-container to endclosed all the data
344) Create an h1 element with text Sign Up
345) Create a bootstrap Form component to collect and send over the data from the frontend to the backend
346) Create a handler called (submitHandler) for the Form onSubmit attribute
347) Populate the Form.Control type field with the correct input type for each field,
and set onChange field with the appropriate useState setter function for ( fullName, address, city, postal code, and country )
348) Add a bootstrap primary button 
349) Go to marxx/backend/routes/userRoutes.js and add a user router for the ( /signup ) endpoint using a POST method
350) Go to marxx/frontend/src/App.js and create a route for the SignupScreen Page namely ( /signup )
351) Go to marxx/frontend/src/screens/SignupScreen.js and dispatch an action with type ( USER_SIGNIN )
and set the payload to the data that was received from the the form through a ajax request using a POST method
In addition, store these hooks in the localStorage ( browser ) with key ( userInfo ) then navigate to the ( redirect ) variable,
which keeps track of where the user is and where they wanted to go.
352) Ensure the user gets redirected to the home page after signing up with the help of the useEffect hook and the redirect variable


=======================================================
Save Changes and Push it to Github : Update log file 23
=======================================================

353) Go to Marxx folder
354) git add .
355) git commit -m "Create Sign-Up Screen"
356) git push origin main


=======================================================
Checkout Wizard : Create Select Payment Method Screen
=======================================================

357) Go to marxx/frontend/src/screens and create a file called ( PaymentMethodScreen.js ) that holds the UI for selecting a payment method,
for this project the two options will be stripe and paypal.
358) Inside PaymentMethodScreen.js, create a functional component as follows:
359) Create a div element to enclose all the data
360) Inside the div element do as follows:
361) Make a call to CheckoutSteps component inside ( marxx/frontend/src/components/CheckoutSteps.js ) and pass steps1 step2 steps3 as props
362) Create a bootstrap container component ( <Container> ) with className small-container to hold the remaining UI code and inside ( <Container> ) do the following:
363) Create an h1 element with text Payment Method
364) Create a bootstrap Form component to collect and send over the data from the frontend to the backend
365) Create a handler called (submitHandler) for the Form onSubmit attribute
366) Create a div with a bootstrap margin bottom with a size value of 3 ( mb-3 )
367) Inside the div element create a bootstrap Form.Check component ( <Form.Check> ) which will be used to create radio buttons, where a user gets the options of selecting a PayPal or Stripe radio button for payment
368) Create the first radio button as follows: 
369) Set ( <Form.Check> ) type to radio to signify that it's a radio button
370) Set ( id, label and value ) to PayPal
371) Set checked to a boolean, where the user selection is compare to the string PayPal to check if the user select the ( paypal ) radio button
372) Set onChange to a method namely setPaymentMethod that sets the payment method useState setter function hook with the value entered by the user when they select a radio button
373) Create a div with a bootstrap margin bottom with a size value of 3 ( mb-3 )
374) Inside the div element create a bootstrap Form.Check component ( <Form.Check> ) which will be used to create radio buttons, where a user gets the options of selecting a PayPal or Stripe radio button for payment
375) Create the second radio button as follows: 
376) Set ( <Form.Check> ) type to radio to signify that it's a radio button
377) Set ( id, label and value ) to Stripe
378) Set checked to a boolean, where the user selection is compare to the string Stripe to check if the user select the ( stripe ) radio button
379) Set onChange to a method namely setPaymentMethod that sets the payment method useState setter function hook with the value entered by the user when they select a radio button
380) Create a bootstrap button of type submit, that reads ( Continue )
381) Create a div element with a bootstrap margin bottom with a size value of 3 ( mb-3 )
382) Import the bootstrap button component ( <Button> ) as follows: import Button from ( 'react-bootstrap/Button' )
383) Make a call to useContext(Store) hook so that you can have access to the state object and the dispatch function
384) Import Store and the useContext hook
385) Deconstruct ( shippingAddress, and paymentMethod ) from cart and deconstruct cart from state
386) Make a call to the ( useEffect() ) hook to redirect the user to the previous page ( '/shipping' ) if the user did not enter the shipping address info
387) Import the useEffect hook and useNavigate, where useNavigate is use to redirect a user to another page, in this case ( '/shipping' )
388) Create a react useState hook to collect and set the payment method selection, namely ( paymentMethodName, setPaymentMethod )
389) Import useState from react
390) Dispatch an action of type ("SAVE_PAYMENT_METHOD") with a payload of ( paymentMethodName )
391) Set the selected Payment Method in the browser using ( localStorage.setItem() ) with key ( 'paymentMethod' )
392) Redirect user to the next step of placing an order with route ( navigate('/placeorder') )
393) Go to marxx/frontend/src/Store.js and define the case for "SAVE_PAYMENT_METHOD"
394) Go to marxx/frontend/src/App.js and create a route for payment ( '/payment' ) and render the Payment Method Screen ( <PaymentMethodScreen/> )
395) Inside App.js, make a call to localStorage.removeItem with key ( 'paymentMethod' ) to erase the payment history from the browser whenever the user sign-out
396) Go to marxx/frontend/src/Store.js and inside the case ( 'USER_SIGNOUT' ) add a field called paymentMethod and set it to an empty string
and retrieve the payment method history from the browser using localStorage.getItem() with key ( 'paymentMethod' ) inside ( initialState )


=======================================================
Save Changes and Push it to Github : Update log file 24
=======================================================

397) Go to Marxx folder
398) git add .
399) git commit -m "Create Select Payment Method Screen"
400) git push origin main


=======================================================
Checkout Wizard : Place Order Screen
=======================================================

401) Go to marxx/frontend/src/screens and create a file called PlaceOrderScreen.js, which is a UI that displays the items in the cart, payment and address history
402) Create a react functional component
403) Create a CheckoutSteps component with props step1 step2 step3 step4
404) Create a h1 element and set the className to bootstrap margin top and bottom of size 3 ( 'my-3' ) and set the h1 element content to ( Preview Order )
405) Create a bootstrap Row component ( <Row> ) and inside create a bootstrap Col component ( <Col> ) of size 8 out of 12 units on medium screens and
inside create a bootstrap card component ( <Card> ) with className set to ( "mb-3" ) with the following characteristics:
a) Set ( <Card.Title> ) to Shipping
b) Set ( <Card.Text> ) to the name of the buyer as well as their address
406) Create a Link component ( <Link> ) to edit the shipping address info at ( '/shipping' )
407) Import Row, Col, Card, Button, ListGroup from react bootstrap
408) Make a call to useContext(Store) hook to get access to ( state ) object and dispatch function ( ctxDispatch )
409) Deconstruct cart, and userInfo from ( state )
410) Import ( Store ), ( useContext() ) hook, ( Link ) and ( useNavigate() ) hook
411) Go to marxx/frontend/src/App.js and add a route called ( '/placeorder' ) and render the place order screen ( PlaceOrderScreen )
412) Go to marxx/frontend/src/PlaceOrderScreen.js and add a bootstrap Card component to display the payment.
413) Add a Link component to redirect the user to the payment screen, namely Edit
414) Create another Card component to display the items in the cart
415) Create a Bootstrap Col component with medium screen set to the remaining 4 out of 12 units.
416) Inside Create a Bootstrap Card Component and display the Order Summary, which includes the 
item price, shipping price, tax price and the total price.
417) Create Bootstrap button with an onClick handler namely ( placeOrderHandler )
418) Make a call to the useEffect hook while checking whether the user fill out the payment method screen and 
if not redirect the user to the payment screen using ( navigate('/payment') )
419) Calculate item price, shipping price, tax price and the total price.


=======================================================
Save Changes and Push it to Github : Update log file 25
=======================================================

420) Go to Marxx folder
421) git add .
422) git commit -m "Place Order Screen"
423) git push origin main


==============================================================================
Checkout Wizard : Implement Place Order Action, Order Schema, and Order Route 
==============================================================================

424) Go to marxx/frontend/src/screens/PlaceOrderScreen.js and make a call to useReducer() hook
with props ( reducer, loading ), where loading is set to a default value of false
and deconstruct ( loading ) variable as well as the ( dispatch ) function
425) Define the reducer such that it accounts for the following cases:
a) Case ( "CREATE_REQUEST"), in this case update the ( loading ) variable to true
b) Case ( "CREATE_SUCCESS"), in this case update the ( loading ) variable to false
c) Case ( "CREATE_FAIL" ), in this case update the ( loading ) variable to false
426) Create a try, catch block inside ( placeOrderHandler ) and in the try block make a call to the dispatch function, dispatching an action type of ( 'CREATE_REQUEST' )
in addition, make a ajax POST request from the frontend end to the backend with endpoint ( '/api/orders' ) with the following fields set, 
( orderItems, shippingAddress, paymentMethod, itemPrice, shippingPrice, taxPrice, and totalPrice )
and inside headers, set authorization to Bearer and the user-login token
and in the catch block, catch the error object and make a call to the ( dispatch ) function 
with action type ( 'CREATE_FAIL' ) and display an error message using toast.error and the utility function ( getError )
427) Import ( getError ) from 'utils', and Import ( toast ) from 'react-toastify'
428) Import ( axios ) from 'axios'
429) Make a call to ( ctxDispatch ) of type "CART_CLEAR", to clear the items in the cart and make a call to ( dispatch ) of action type 'CREATE_SUCCES'
430) Make a call to localStorage.removeItem('cartItems') to remove all the cartItems from the browser storage
431) Redirect the user to the Order Details Page using navigate( '/order/${data.order._id}' );
432) Render a ( LoadingBox ) component if the loading variable is still set to true after the place order button
433) Import the ( LoadingBox ) component
434) Go to marxx/frontend/src/Store.js to implment the case "CART_CLEAR", where all the items in the 
cart is removed by setting the updating the cart state and setting cartItems to an empty array
435) Go to marxx/backend/models and create a file called orderModle.js, which is the database schema for all the 
items in the cart and their prices along with tax, user info, their address, and payment history
436) Go to marxx/backend/routes and create a file called ( orderRoutes.js )
437) Make a ajax POST request to the homppage ( '/' ) and send over the order items object, pass a function namely isAuth, that authoriza a user
438) Go to marxx/backend/utils.js and authorize the user with the token received
439) Go to marxx/backend/server.js and add a route for order route


=======================================================
Save Changes and Push it to Github : Update log file 26
=======================================================

440) Go to Marxx folder
441) git add .
442) git commit -m "Implement Place Order Action, Order Schema, and Order Route "
443) git push origin main


======================================
Checkout Wizard : Create Order Screen
======================================

444) Go to marxx/frontend/screens and create a file called ( OrderScreen.js ), which will be used
as the UI for displaying the shipping info, payment method and status, items in the cart, as well as a 
Order Summary, which includes the price of the items, shipping, tax and total cost.
445) Create a react functional component and do the following:
446) Render the ( <LoadingBox> ) component if the loading variable is set to true,
447) Display the ( <MessageBox> ) component if the error variable is set to true
448) Otherwise render the UI for the page
449) Make a call to useReducer and set the default value for ( loading ) to true, 
( order ) to an empty object, and the ( error ) variable to an empty string
450) Define a ( reducer ) function as follows:
a) Case ( "FETCH_REQUEST" ), where the state gets updated to set ( loading ) to true, and the ( error ) variable to an empty string
b) Case ( "FETCH_SUCCESS"), where the state gets updated to set ( loading ) to false, and ( order ) object 
is set to the action payload and the ( error ) variable is set to an empty string
c) Case ( "FETCH_FAIL" ), where the state gets updated to set ( loading ) to false, ( error ) to the action payload
450) Make a call to ( useEffect() ) hook to make a request to the backend
451) Make a call to ( useParams ) and rename id to orderId
452) Go to marxx/frontend/src/App.js and create a route for order screen where the path is set to ( "/order/:id" ) and render the ( <OrderScreen> ) component
453) Go to marxx/frontend/src/screens/OrderScreen.js and a create an h1 element with content set to Order
454) Create a bootstrap Row component ( <Row> ) and inside create a bootstrap Col ( <Col> ) with medium screen size set to 8 out of 12 units
and create a Card component to display the shipper's name, address, and when the package was delivered
455) Create another bootstrap Card component to display payment transaction
456) Create a third bootstrap Card component to display all the items in the shopping cart
457) Create a fourth bootstrap Card component to display the Order Summary, which include the cost of the items in the cart including tax and shipping price
458) Import Row, Col, ListGroup, Card, <MessageBox>, <LoadingBox>
459) Go to marxx/backend/routes/orderRoutes.js and create a route for a GET request with endpoint ( "/:id" ) to retrieve a specific order


=======================================================
Save Changes and Push it to Github : Update log file 27
=======================================================

460) Go to Marxx folder
461) git add .
462) git commit -m "Create Order Screen"
463) git push origin main


============================================
Checkout Wizard : Make Payment using PayPal
============================================

464) Generate Paypal Client Id
465) Go to ( developer.paypal.com/home ) and register for a personal account, 
where the Sandbox version is used. Switch to business account for live transaction
466) Click on Your Name --> Dashboard 
Click on Apps & Credentials, Type in a App Name ( Marxx ). Set Type to Merchant and Sandbox Account to Sandbox Business Account and lastly select create app
467) Go to marxx/backend/.env and create an environment variable called ( PAYPAL_CLIENT_ID ) and paste the ( ClientId ) from ( Paypal )
468) Go to marxx/backend/server.js and make a GET request, accessing the Paypal api using the endpoint ( "/api/keys/paypal" )
469) Go to marxx/frontend and install the react paypal package by running the following command: ( npm install @paypal/react-paypal-js )
470) Go to marxx/frontend/src/index.js and wrap ( <PayPalScriptProvider deferLoading={true}> ) around ( <App/> ) and import <PayPalScriptProvider> package
as follows: import { PayPalScriptProvider } from ( '@paypal/react-paypal-js')
471) Go to marxx/frontend/src/screens/OrderScreen.js and import ( { PayPalButtons, usePayPalScriptReducer } ) from ( "@paypal/react-paypal-js"; )
472) Inside OrderScreen.js send an ajax GET request from the frontend to the backend to get the paypal client id by creating a method called ( loadPaypalScript )
473) Make a call to usePayPalScriptReducer()
474) Go into the JSX and create a conditional statment to render the paypal button whenever an order isn't paid
475) Implement the cases for all the methods that were called on the PayPalButoons component in the reducer function as follows:
a) Case ( "PAY_REQUEST" ), which updates the ( state ) by setting the ( loadingPay ) variable to true
b) Case ( "PAY_SUCCESS" ), which updates the state by setting the ( loadingPay ) variable to false and the ( successPay ) variable to true
c) Case ( "PAY_FAIL" ), which updates the state by setting the ( loadingPay ) variable to false
d) Case ( "PAY_RESET" ), which updates the state by setting the ( loadingPay ) variable to false and the ( successPay ) variable to false 
476) In the useReducer hook set the default value of ( successPay ) and ( loadingPay ) to false
477) Update the if condition in the useEffect hook to run fetchOrder when successPay is set to true and add the ( successPay ) variable to the useEffect dependency list
478) In the JSX, display the Loading Box component when the ( loadingPay ) variable is set to true
479) Go to marxx/backend/routes/orderRoutes.js and implement a route with endpoint ( "/:id/pay" ) using a PUT method, and passing isAuth method to the function as well as expressAsyncHandler
480) Test the sanbox version of paypal by signing-in and run a payment


=======================================================
Save Changes and Push it to Github : Update log file 28
=======================================================

481) Go to Marxx folder
482) git add .
483) git commit -m "Make Payment using PayPal"
485) git push origin main



==============================================
Customer Panel : Displaying the Order History
==============================================

486) Go to marxx/frontend/src/screens and create a file called ( OrderHistoryScreen.js ),
which will be used to display all the orders of a given user
487) Render a reaction functional component indise ( OrderHistoryScreen.js )
488) Create a h1 element that displays the content ( "Order History" )
489) Create a conditional render such that if the ( loading ) variable is true, display the Loading Box component ( <LoadingBox /> ),
if the ( error ) variable is set to true, show the Message Box component ( <MessageBox> ) and displaying the error variable to the user,
Otherwise Dislay the order history UI
490) Import LoadingBox component ( <LoadingBox> ), MessageBox component ( <MessageBox> ) 
491) Create a table with columns ( ID, DATE, TOTAL, PAID, DELIVERED, ACTIONS )
492) Make a call to the useContext(Store) hook and deconstruct the ( state ) object from it, and then deconstruct ( userInfo ) from ( state )
493) Import the imports for ( useNavigate() ) hook, and ( useReducer() ) hook,
where the default value of ( loading ) is set to true and ( error ) is set to an empty string
494) Define a reducer with the following action type
a) Case ( "FETCH_REQUEST" ), where the state gets updated such that the ( loading ) variable is set to true
b) Case ( "FETCH_SUCCESS" ), where the state gets updated such that ( orders ) is set to the action payload and ( loading ) is set to false
c) Case ( "FETCH_FAIL" ), where the state get updated such that ( loading ) is set to false and ( error ) is set to the action payload
495) Make a call to the ( useEffect() ) hook, to send an ajax request from the frontend to the backend
496) Use a map function to render all the ( orders ) in the table body ( <tbody> )
497) Go to marxx/backend/routes/orderRoutes.js and implement the api used in the frontend in ( OrderHistoryScreen.js ) namely ( `/api/orders/mine` ) onto the backend
498) Create the `/api/orders/mine` endpoint such that it uses the user Id, to located the orders of that particular user in the database and then send over all the overs to the frontend
499) Go to marxx/frontend/src/App.js and add a route with path set to ( "/orderhistory" ) and render the OrderHistoryScreen component ( <OrderHistoryScreen />)


=======================================================
Save Changes and Push it to Github : Update log file 29
=======================================================

500) Go to Marxx folder
501) git add .
502) git commit -m "Displaying the Order History"
503) git push origin main


==============================================
Customer Panel : Create User Profile Screen
==============================================

504) Go to marxx/frontend/src/screens and create a file called ( ProfileScreen.js ),
which is the UI for the User Profile Page
505) Create a react functional component
506) Make a call to useContext(Store) hook to get the ( state ) object and ( dispatch ) function
507) Deconstruct ( userInfo ) from ( state )
508) Create a h1 element with content ( User Profile )
509) Create a bootstrap Form component to send over the data from the frontend to the backend
510) Create a Form.Group for Name as follows:
511) Set the Form.Label content to Name
512) Set the Form.Control value attribite to ( name ), where name is a ( useState() ) hook
513) Set the Form.Control onChange attribute is set to a function that calls the setter function for the usestate ( name ) hook, namely (setName)
514) Create a Form.Group for Email as follows:
515) Set Form.Label content to Email
516) Set the Form.Control value attribute to ( email ), where email is a ( useState() ) hook
517) Set the Form.Control onChange attribute to a function that calls the setter function for ( email ), this setter function is called ( setEmail )
518) Create a Form.Group for Password as follows:
519) Set Form.Label content to Password
520) Set the Form.Control value attribute to ( password ), where password is a ( useState() ) hook
521) Set the Form.Control onChange attribute to a function that calls the setter function for ( password ), this setter function is called ( setPassword )
522) Create a Form.Group for confirmPassword as follows:
523) Set Form.Label content to Conform Password
524) Set the Form.Control value attribute to ( confirmPassword ), where email is a ( useState() ) hook
525) Set the Form.Control onChange attribute to a function that calls the setter function for ( confirmPassword ), this setter function is called ( setConfirmPassword )
526) Create the useState variables and their setter functions: ( name, setName ), ( email, setEmail ), ( password, setPassword ), and ( confirmPassword, setConfirmPassword )
527) Create a bootstrap Button component with type set to ( "submit" ) to send over the data, where the content of the button is ( Update )
528) Go to marxx/frontend/src/App.js and add a route for the ( ProfileScreen ) page
529) Go to marxx/frontend/src/screens/ProfileScreen.js and implemnent submitHandler function, where submitHandler is the function invoke on the onSubmit attribite
530) Make a call to useReducer hook and deconstruct the ( loadingUpdate ) variable and the ( dispatch ) function
531) Define a reducer with the following action type cases
532) Case ( "UPDATE_REQUEST" ), where the ( state ) gets updated such that the ( loadingUpdate ) variable is set to true
533) Case ( "UPDATE_SUCCESS" ), where the ( state ) gets updated such that the ( loadingUpdate ) variable is set to false 
534) Case ( "UPDATE_FAIL" ), where the ( state ) gets updated such that the ( loadingUpdate ) variable is set to false 
535) Go to marxx/backend/routes/userRoutes.js to implment the api endpoint used in ( ProfileScreen.js ) namely ('/api/users/profile',)
536) Go to marxx/frontend/src/App.js and redirect the user to the sign-in screen using ( window.location.href = '/signin )


=======================================================
Save Changes and Push it to Github : Update log file 30
=======================================================

537) Go to Marxx folder
538) git add .
539) git commit -m "Create User Profile Screen"
540) git push origin main


==============================================
Github pages : Deploying the Application
==============================================

541) Go to marxx and run the following command ( npm install gh-pages --save-dev )
542) Go to marxx/package.json file and type the following command below type: 
"homepage": "https://gitname.github.io/react-gh-pages" ==>
"homepage": "https://chevano.github.io/Marxx"
Under "scripts" type the following command:
"predeploy": "npm run build"
"deploy": "gh-pages -d build"

"homepage": "https://github.com/chevano/Marxx#readme", --> Might be relevant

543) Save and push changes to github
544) Go to marxx and run the following command: ( npm run deploy )
545) Go to github.com and sign-in:
Go to marxx/setting/pages --> and under Build and Deployment set Branch to ( none ) changes to ( gh-pages )

===============================================================================================
Save Changes and Push it to Github : Update log file 31 --> 32 ( Remove files for render.com )
===============================================================================================

537) Go to Marxx folder
538) git add .
539) git commit -m "Deploy App to github"
540) git push origin main